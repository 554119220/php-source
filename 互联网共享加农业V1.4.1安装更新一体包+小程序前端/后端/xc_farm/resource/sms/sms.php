<?php
 goto lD9IA; y1NKF: class xcap_SmsDemo { static $acsClient = null; public static function getAcsClient($AccessKeyId, $AccessKeySecret) { goto jARxt; kX8UG: if (!(static::$acsClient == null)) { goto uhIf5; } goto OOzzS; DWe45: $region = "\143\x6e\55\150\141\x6e\x67\172\x68\x6f\165"; goto lRaOI; nC7Fw: static::$acsClient = new DefaultAcsClient($profile); goto eOOwA; duH6t: $domain = "\x64\x79\163\155\163\141\160\151\56\x61\154\x69\171\x75\x6e\143\x73\x2e\x63\157\x6d"; goto poFc3; jARxt: $product = "\104\x79\x73\155\163\141\160\151"; goto duH6t; eOOwA: uhIf5: goto Zj0dv; lRaOI: $endPointName = "\x63\156\55\150\141\156\x67\172\150\x6f\165"; goto kX8UG; amvEm: $accessKeySecret = $AccessKeySecret; goto DWe45; poFc3: $accessKeyId = $AccessKeyId; goto amvEm; cHnNq: DefaultProfile::addEndpoint($endPointName, $region, $product, $domain); goto nC7Fw; Zj0dv: return static::$acsClient; goto MKAsQ; OOzzS: $profile = DefaultProfile::getProfile($region, $accessKeyId, $accessKeySecret); goto cHnNq; MKAsQ: } public static function sendSms($AccessKeyId, $AccessKeySecret, $signName, $templateCode, $phoneNumbers, $templateParam = null, $outId = null, $smsUpExtendCode = null) { goto nMhnR; ItsfY: $request->setSmsUpExtendCode($smsUpExtendCode); goto QYsSU; kWjDh: $request->setOutId($outId); goto KSQBK; fw_1E: $request->setSignName($signName); goto sOPpz; sOPpz: $request->setTemplateCode($templateCode); goto wVfgE; KSQBK: SacUq: goto AZKCO; EF1oR: $request->setTemplateParam(json_encode($templateParam)); goto Dc3kX; QYsSU: Zty0y: goto wPHQy; Dc3kX: CnYHM: goto Ysm1g; AZKCO: if (!$smsUpExtendCode) { goto Zty0y; } goto ItsfY; nrPiO: $request->setPhoneNumbers($phoneNumbers); goto fw_1E; wPHQy: $acsResponse = static::getAcsClient($AccessKeyId, $AccessKeySecret)->getAcsResponse($request); goto KY38q; Ysm1g: if (!$outId) { goto SacUq; } goto kWjDh; nMhnR: $request = new SendSmsRequest(); goto nrPiO; wVfgE: if (!$templateParam) { goto CnYHM; } goto EF1oR; KY38q: return $acsResponse; goto J8Ajq; J8Ajq: } public function queryDetails($phoneNumbers, $sendDate, $pageSize = 10, $currentPage = 1, $bizId = null) { goto YD24F; S0KKv: $request->setPhoneNumber($phoneNumbers); goto obQ3s; MOhNb: $request->setPageSize($pageSize); goto JF2zy; YD24F: $request = new QuerySendDetailsRequest(); goto S0KKv; obQ3s: $request->setBizId($bizId); goto PuHDq; JF2zy: $request->setCurrentPage($currentPage); goto E2AWy; E2AWy: $acsResponse = static::getAcsClient()->getAcsResponse($request); goto dro92; dro92: return $acsResponse; goto RXnQF; PuHDq: $request->setSendDate($sendDate); goto MOhNb; RXnQF: } } goto hLc2P; iyJK_: class ShaHmac1Signer implements ISigner { public function signString($source, $accessSecret) { return base64_encode(hash_hmac("\163\150\141\61", $source, $accessSecret, true)); } public function getSignatureMethod() { return "\110\115\101\x43\55\123\110\101\61"; } public function getSignatureVersion() { return "\61\x2e\60"; } } goto bE93f; P7YLN: class Endpoint { private $name; private $regionIds; private $productDomains; function __construct($name, $regionIds, $productDomains) { goto BgQm3; ZKpCB: $this->regionIds = $regionIds; goto w6pfv; BgQm3: $this->name = $name; goto ZKpCB; w6pfv: $this->productDomains = $productDomains; goto kcW7q; kcW7q: } public function getName() { return $this->name; } public function setName($name) { $this->name = $name; } public function getRegionIds() { return $this->regionIds; } public function setRegionIds($regionIds) { $this->regionIds = $regionIds; } public function getProductDomains() { return $this->productDomains; } public function setProductDomains($productDomains) { $this->productDomains = $productDomains; } } goto oTafi; EJ0TY: abstract class AcsRequest { protected $version; protected $product; protected $actionName; protected $regionId; protected $acceptFormat; protected $method; protected $protocolType = "\x68\x74\164\x70"; protected $content; protected $queryParameters = array(); protected $headers = array(); function __construct($product, $version, $actionName) { goto RT2Ns; hMbeX: $this->actionName = $actionName; goto GD70F; RT2Ns: $this->headers["\170\x2d\163\x64\153\x2d\143\x6c\151\x65\x6e\164"] = "\160\x68\160\x2f\62\x2e\x30\x2e\60"; goto qLAub; Az8jl: $this->version = $version; goto hMbeX; qLAub: $this->product = $product; goto Az8jl; GD70F: } public abstract function composeUrl($iSigner, $credential, $domain); public function getVersion() { return $this->version; } public function setVersion($version) { $this->version = $version; } public function getProduct() { return $this->product; } public function setProduct($product) { $this->product = $product; } public function getActionName() { return $this->actionName; } public function setActionName($actionName) { $this->actionName = $actionName; } public function getAcceptFormat() { return $this->acceptFormat; } public function setAcceptFormat($acceptFormat) { $this->acceptFormat = $acceptFormat; } public function getQueryParameters() { return $this->queryParameters; } public function getHeaders() { return $this->headers; } public function getMethod() { return $this->method; } public function setMethod($method) { $this->method = $method; } public function getProtocol() { return $this->protocolType; } public function setProtocol($protocol) { $this->protocolType = $protocol; } public function getRegionId() { return $this->regionId; } public function setRegionId($region) { $this->regionId = $region; } public function getContent() { return $this->content; } public function setContent($content) { $this->content = $content; } public function addHeader($headerKey, $headerValue) { $this->headers[$headerKey] = $headerValue; } } goto wxwEc; wxwEc: abstract class RpcAcsRequest extends AcsRequest { private $dateTimeFormat = "\x59\55\x6d\55\x64\x5c\x54\110\x3a\151\x3a\163\134\x5a"; private $domainParameters = array(); function __construct($product, $version, $actionName) { parent::__construct($product, $version, $actionName); $this->initialize(); } private function initialize() { $this->setMethod("\107\105\x54"); $this->setAcceptFormat("\112\x53\117\116"); } private function prepareValue($value) { goto RGZBa; Bu1hR: goto wprH1; goto B9Mdm; RGZBa: if (is_bool($value)) { goto Du200; } goto foEag; B9Mdm: QE5Pd: goto zZgig; ShOrx: H1P6Q: goto R8EOi; zZgig: return "\x74\162\165\145"; goto Y6BWh; Y6BWh: wprH1: goto ShOrx; ydJ9I: Du200: goto a8GOV; tfIFU: return "\146\x61\x6c\x73\145"; goto Bu1hR; foEag: return $value; goto gpBfU; gpBfU: goto H1P6Q; goto ydJ9I; a8GOV: if ($value) { goto QE5Pd; } goto tfIFU; R8EOi: } public function composeUrl($iSigner, $credential, $domain) { goto uJHTS; O7zYE: $apiParams["\124\151\x6d\x65\x73\164\141\x6d\160"] = date($this->dateTimeFormat); goto MzVPM; hKjjO: foreach ($apiParams as $apiParamKey => $apiParamValue) { $this->putDomainParameters($apiParamKey, $apiParamValue); z2coy: } goto Wx0bi; csjG8: m2ZSJ: goto l3lar; i6Us9: $apiParams["\x53\x69\147\x6e\141\164\165\162\145\x56\145\162\x73\x69\x6f\x6e"] = $iSigner->getSignatureVersion(); goto AGs77; k_4a4: $requestUrl = $this->getProtocol() . "\x3a\x2f\57" . $domain . "\x2f\77"; goto y3Ge8; MzVPM: $apiParams["\101\143\x74\x69\157\x6e"] = $this->getActionName(); goto CVUvv; fCTr2: $apiParams["\106\x6f\162\x6d\141\x74"] = $this->getAcceptFormat(); goto VlIB0; a4j6R: $requestUrl = $this->getProtocol() . "\72\57\57" . $domain . "\57"; goto hKjjO; rxBmp: $apiParams["\x52\145\147\151\x6f\156\x49\144"] = $this->getRegionId(); goto lsoV0; CVUvv: $apiParams["\126\x65\162\163\x69\x6f\156"] = $this->getVersion(); goto eto4m; V3rXR: foreach ($apiParams as $key => $value) { $apiParams[$key] = $this->prepareValue($value); iHvXQ: } goto jM1I_; lsoV0: $apiParams["\x41\x63\x63\x65\x73\x73\x4b\x65\171\x49\144"] = $credential->getAccessKeyId(); goto fCTr2; y3Ge8: foreach ($apiParams as $apiParamKey => $apiParamValue) { $requestUrl .= "{$apiParamKey}\x3d" . urlencode($apiParamValue) . "\x26"; SBKaP: } goto csjG8; yKDuI: date_default_timezone_set("\x47\x4d\x54"); goto O7zYE; uJHTS: $apiParams = parent::getQueryParameters(); goto V3rXR; eto4m: $apiParams["\123\151\147\156\141\x74\x75\162\x65"] = $this->computeSignature($apiParams, $credential->getAccessSecret(), $iSigner); goto x9MjI; iKHi0: goto gFvEj; goto jhWMj; l3lar: return substr($requestUrl, 0, -1); goto iKHi0; AGs77: $apiParams["\123\151\147\x6e\141\x74\x75\x72\x65\116\x6f\156\x63\x65"] = uniqid(mt_rand(0, 0xffff), true); goto yKDuI; n257g: gFvEj: goto JSmml; VlIB0: $apiParams["\x53\151\x67\156\141\164\x75\x72\145\115\145\164\150\x6f\144"] = $iSigner->getSignatureMethod(); goto i6Us9; jM1I_: JgwQn: goto rxBmp; jhWMj: xiX2b: goto a4j6R; x9MjI: if (parent::getMethod() == "\120\117\123\x54") { goto xiX2b; } goto k_4a4; nZNFm: return $requestUrl; goto n257g; Wx0bi: z66w9: goto nZNFm; JSmml: } private function computeSignature($parameters, $accessKeySecret, $iSigner) { goto penWQ; DGkI6: foreach ($parameters as $key => $value) { $canonicalizedQueryString .= "\46" . $this->percentEncode($key) . "\x3d" . $this->percentEncode($value); qzTZ0: } goto e903L; UTeEv: $stringToSign = parent::getMethod() . "\x26\45\x32\106\x26" . $this->percentencode(substr($canonicalizedQueryString, 1)); goto BCXuM; e903L: APBE9: goto UTeEv; qCyzo: $canonicalizedQueryString = ''; goto DGkI6; nAw0I: return $signature; goto HVodv; penWQ: ksort($parameters); goto qCyzo; BCXuM: $signature = $iSigner->signString($stringToSign, $accessKeySecret . "\x26"); goto nAw0I; HVodv: } protected function percentEncode($str) { goto glazR; S91T5: $res = preg_replace("\x2f\x5c\x2a\57", "\x25\62\101", $res); goto KdgHo; KdgHo: $res = preg_replace("\57\45\67\105\x2f", "\176", $res); goto GezGr; glazR: $res = urlencode($str); goto mfXjV; mfXjV: $res = preg_replace("\x2f\134\53\57", "\x25\x32\x30", $res); goto S91T5; GezGr: return $res; goto biUVJ; biUVJ: } public function getDomainParameter() { return $this->domainParameters; } public function putDomainParameters($name, $value) { $this->domainParameters[$name] = $value; } } goto X8fA0; DjXA2: foreach ($json_array["\105\156\x64\160\x6f\151\x6e\164"] as $json_endpoint) { goto aIbje; toUDC: JM4U0: goto RRjZK; vS6pB: if (array_keys($json_products) !== range(0, count($json_products) - 1)) { goto hR4BD; } goto PjsFO; PjsFO: $products = $json_products; goto gVSdm; gVSdm: goto Z1TKX; goto n0hvq; SdxNK: LdHqj: goto cxcKP; n0hvq: hR4BD: goto k5Y20; AiPWx: $region_ids = array(); goto mgo5t; k6zFR: tbS2r: goto AiPWx; tyhPD: $region_ids = array($json_region_ids); goto WR9cI; cxcKP: $endpoint = new Endpoint($region_ids[0], $region_ids, $product_domains); goto ZQXmR; mgo5t: SQLsm: goto ENmjl; OqrUv: BYs53: goto a3GBi; MuVW0: $json_products = $json_endpoint["\120\162\157\x64\x75\x63\164\163"]["\120\162\x6f\144\x75\143\x74"]; goto tLVAu; qjuL5: SzGIl: goto hoBNm; cVRHZ: goto N7j_U; goto p6Zpb; dVOJT: $region_ids = $json_region_ids; goto cVRHZ; k5Y20: $products = array($json_products); goto TNUHg; sQ2Xc: f0rMf: goto VMqYO; XC64x: foreach ($products as $product) { goto WklJw; xGjHL: array_push($product_domains, $product_domain); goto sHRo4; sHRo4: VlPWB: goto Y4L3w; WklJw: $product_domain = new ProductDomain($product["\x50\x72\x6f\x64\x75\x63\x74\116\141\x6d\145"], $product["\x44\157\x6d\x61\151\156\x4e\x61\155\145"]); goto xGjHL; Y4L3w: } goto SdxNK; ZQXmR: array_push($endpoints, $endpoint); goto qjuL5; aIbje: if (!array_key_exists("\122\x65\147\151\157\x6e\x49\144", $json_endpoint["\122\x65\147\x69\157\x6e\111\144\163"])) { goto tbS2r; } goto KXNWJ; TNUHg: Z1TKX: goto D9DDJ; KXNWJ: $json_region_ids = $json_endpoint["\x52\x65\x67\151\157\x6e\x49\x64\163"]["\x52\145\147\x69\x6f\x6e\111\x64"]; goto DF5M4; WR9cI: N7j_U: goto GiPvl; D9DDJ: goto Jw1ij; goto toUDC; sSf7A: goto f0rMf; goto OqrUv; DF5M4: if (!is_array($json_region_ids)) { goto WlZZw; } goto dVOJT; a3GBi: $products = array(); goto sQ2Xc; RRjZK: $products = array(); goto JIPSf; VMqYO: $product_domains = array(); goto XC64x; ENmjl: if (!array_key_exists("\x50\x72\x6f\144\165\143\x74", $json_endpoint["\120\162\157\x64\165\x63\x74\163"])) { goto BYs53; } goto MuVW0; JIPSf: Jw1ij: goto sSf7A; p6Zpb: WlZZw: goto tyhPD; GiPvl: goto SQLsm; goto k6zFR; tLVAu: if (array() === $json_products or !is_array($json_products)) { goto JM4U0; } goto vS6pB; hoBNm: } goto S1KAC; cwFKQ: define("\105\116\101\102\x4c\105\137\110\124\124\x50\137\120\x52\x4f\x58\x59", FALSE); goto bjz1N; YQ6G3: class DefaultProfile implements IClientProfile { private static $profile; private static $endpoints; private static $credential; private static $regionId; private static $acceptFormat; private static $isigner; private static $iCredential; private function __construct($regionId, $credential) { self::$regionId = $regionId; self::$credential = $credential; } public static function getProfile($regionId, $accessKeyId, $accessSecret) { goto BctQX; Ghb3f: return self::$profile; goto CD2qA; HOK10: self::$profile = new DefaultProfile($regionId, $credential); goto Ghb3f; BctQX: $credential = new Credential($accessKeyId, $accessSecret); goto HOK10; CD2qA: } public function getSigner() { goto eO0Kb; c6Z6J: return self::$isigner; goto p_Eg_; eO0Kb: if (!(null == self::$isigner)) { goto PsGb6; } goto NpjV7; NpjV7: self::$isigner = new ShaHmac1Signer(); goto S4uQK; S4uQK: PsGb6: goto c6Z6J; p_Eg_: } public function getRegionId() { return self::$regionId; } public function getFormat() { return self::$acceptFormat; } public function getCredential() { goto abAte; qyKwB: return self::$credential; goto nDegj; PQgC2: self::$credential = self::$iCredential; goto pVCqN; abAte: if (!(null == self::$credential && null != self::$iCredential)) { goto iA58G; } goto PQgC2; pVCqN: iA58G: goto qyKwB; nDegj: } public static function getEndpoints() { goto NnugQ; l8hy4: return self::$endpoints; goto g7og_; elCyW: self::$endpoints = EndpointProvider::getEndpoints(); goto RBnLq; RBnLq: fDyWN: goto l8hy4; NnugQ: if (!(null == self::$endpoints)) { goto fDyWN; } goto elCyW; g7og_: } public static function addEndpoint($endpointName, $regionId, $product, $domain) { goto c5LvE; fF3Xo: goto tw0cH; goto eevyY; RGblm: self::addEndpoint_($endpointName, $regionId, $product, $domain); goto T4wCz; SaTEt: $endpoint = self::findEndpointByName($endpointName); goto uXget; D2uf_: self::updateEndpoint($regionId, $product, $domain, $endpoint); goto fF3Xo; ttbOb: TN7Lh: goto SaTEt; T4wCz: tw0cH: goto uRnO8; uXget: if (null == $endpoint) { goto B3rIt; } goto D2uf_; c7gts: self::$endpoints = self::getEndpoints(); goto ttbOb; c5LvE: if (!(null == self::$endpoints)) { goto TN7Lh; } goto c7gts; eevyY: B3rIt: goto RGblm; uRnO8: } public static function findEndpointByName($endpointName) { foreach (self::$endpoints as $key => $endpoint) { goto cwiSO; WGvpF: giY7E: goto ymjY_; GLZRH: tjo1v: goto WGvpF; BIHWi: return $endpoint; goto GLZRH; cwiSO: if (!($endpoint->getName() == $endpointName)) { goto tjo1v; } goto BIHWi; ymjY_: } QpcSO: } private static function addEndpoint_($endpointName, $regionId, $product, $domain) { goto mSi1H; m0P8P: $productDomains = array(new ProductDomain($product, $domain)); goto H32fg; H32fg: $endpoint = new Endpoint($endpointName, $regionIds, $productDomains); goto uUt3Z; mSi1H: $regionIds = array($regionId); goto m0P8P; uUt3Z: array_push(self::$endpoints, $endpoint); goto z29lc; z29lc: } private static function updateEndpoint($regionId, $product, $domain, $endpoint) { goto U_56Q; ouxOk: array_push($productDomains, new ProductDomain($product, $domain)); goto yLxks; Nx4gC: $endpoint->setRegionIds($regionIds); goto YUEPE; RHYO3: array_push($regionIds, $regionId); goto Nx4gC; kPo6y: $productDomains = $endpoint->getProductDomains(); goto f5rdN; YUEPE: GCz90: goto kPo6y; IbwtE: if (in_array($regionId, $regionIds)) { goto GCz90; } goto RHYO3; Yyc03: $endpoint->setProductDomains($productDomains); goto Xibnc; U_56Q: $regionIds = $endpoint->getRegionIds(); goto IbwtE; yLxks: fNvH4: goto Yyc03; f5rdN: if (!(null == self::findProductDomain($productDomains, $product, $domain))) { goto fNvH4; } goto ouxOk; Xibnc: } private static function findProductDomain($productDomains, $product, $domain) { goto roOxF; UYBS7: Yyghu: goto ghjly; roOxF: foreach ($productDomains as $key => $productDomain) { goto G1U1I; q5Fcu: R4VU6: goto p3qh2; gZ2Rj: return $productDomain; goto q5Fcu; G1U1I: if (!($productDomain->getProductName() == $product && $productDomain->getDomainName() == $domain)) { goto R4VU6; } goto gZ2Rj; p3qh2: Ab0LZ: goto VSO8r; VSO8r: } goto UYBS7; ghjly: return null; goto D_76M; D_76M: } } goto EJ0TY; Ys0s9: class HttpRequest { public $timeoutMs; public $url; public $method; public $customHeaders; public $dataToPost; public $userData; } goto kpTON; Bz1nP: $xml = simplexml_load_string(file_get_contents($endpoint_filename)); goto r72zf; S1KAC: pxn2a: goto CcEjV; HrVDj: class DefaultAcsClient implements IAcsClient { public $iClientProfile; public $__urlTestFlag__; function __construct($iClientProfile) { $this->iClientProfile = $iClientProfile; $this->__urlTestFlag__ = false; } public function getAcsResponse($request, $iSigner = null, $credential = null, $autoRetry = true, $maxRetryNumber = 3) { goto PAbmb; K2RT2: if (!(false == $httpResponse->isSuccess())) { goto UnP0e; } goto wpkT7; ii98q: $respObject = $this->parseAcsResponse($httpResponse->getBody(), $request->getAcceptFormat()); goto K2RT2; khZt4: UnP0e: goto dFToh; PAbmb: $httpResponse = $this->doActionImpl($request, $iSigner, $credential, $autoRetry, $maxRetryNumber); goto ii98q; wpkT7: $this->buildApiException($respObject, $httpResponse->getStatus()); goto khZt4; dFToh: return $respObject; goto wxL_1; wxL_1: } private function doActionImpl($request, $iSigner = null, $credential = null, $autoRetry = true, $maxRetryNumber = 3) { goto xCtal; ktY8A: if (!$this->__urlTestFlag__) { goto XX2ti; } goto n22zp; Cj00z: $httpResponse = HttpHelper::curl($requestUrl, $request->getMethod(), $request->getDomainParameter(), $request->getHeaders()); goto d_GAF; E02Nm: voQaD: goto CZiL_; xWhl0: return $httpResponse; goto Ci7eW; d_GAF: g13Em: goto nV5yB; tgePZ: $retryTimes++; goto LChU8; d9h23: if (!(500 <= $httpResponse->getStatus() && $autoRetry && $retryTimes < $maxRetryNumber)) { goto kqFpT; } goto VLvWK; w7wYB: $domain = EndpointProvider::findProductDomain($request->getRegionId(), $request->getProduct()); goto u2UqR; ISd48: VDaWb: goto qeLJI; fBI2x: UzM1s: goto Cj00z; zI_Q3: tUgQj: goto tgePZ; PNRVG: TfvEV: goto d9h23; MFKOm: if (count($request->getDomainParameter()) > 0) { goto UzM1s; } goto nnmEt; CZiL_: $httpResponse = HttpHelper::curl($requestUrl, $request->getDomainParameter(), $request->getHeaders()); goto zI_Q3; gIiw6: goto tUgQj; goto E02Nm; oo0vh: kqFpT: goto xWhl0; f8J8t: if (count($request->getDomainParameter()) > 0) { goto voQaD; } goto FvzId; spIGs: OLO_O: goto r3X6c; qeLJI: $requestUrl = $request->composeUrl($iSigner, $credential, $domain); goto ktY8A; sgc08: $iSigner = $this->iClientProfile->getSigner(); goto EP66h; nV5yB: $retryTimes = 1; goto PNRVG; fXMnk: XX2ti: goto MFKOm; VLvWK: $requestUrl = $request->composeUrl($iSigner, $credential, $domain); goto f8J8t; LChU8: goto TfvEV; goto oo0vh; DnSUd: $request = $this->prepareRequest($request); goto w7wYB; PefnW: throw new ClientException("\103\141\x6e\x20\156\157\x74\40\146\151\x6e\x64\40\145\x6e\144\x70\157\x69\156\x74\40\x74\157\40\141\x63\143\145\x73\x73\56", "\x53\104\x4b\56\111\156\166\x61\154\x69\144\122\x65\x67\151\157\x6e\x49\x64"); goto ISd48; n22zp: throw new ClientException($requestUrl, "\125\x52\114\124\145\x73\164\106\x6c\x61\x67\111\163\123\145\164"); goto fXMnk; r3X6c: if (!(null == $iSigner)) { goto jkI6e; } goto sgc08; EP66h: jkI6e: goto j4GEx; nnmEt: $httpResponse = HttpHelper::curl($requestUrl, $request->getMethod(), $request->getContent(), $request->getHeaders()); goto Y1o9T; FvzId: $httpResponse = HttpHelper::curl($requestUrl, $request->getMethod(), $request->getContent(), $request->getHeaders()); goto gIiw6; u2UqR: if (!(null == $domain)) { goto VDaWb; } goto PefnW; Y1o9T: goto g13Em; goto fBI2x; BhK6g: AzTRw: goto DnSUd; j4GEx: if (!(null == $credential)) { goto AzTRw; } goto SGz4T; xCtal: if (!(null == $this->iClientProfile && (null == $iSigner || null == $credential || null == $request->getRegionId() || null == $request->getAcceptFormat()))) { goto OLO_O; } goto dD3_3; SGz4T: $credential = $this->iClientProfile->getCredential(); goto BhK6g; dD3_3: throw new ClientException("\116\x6f\x20\x61\x63\x74\151\166\x65\x20\160\162\157\x66\x69\154\x65\x20\146\157\x75\156\144\56", "\x53\x44\113\56\x49\x6e\x76\x61\x6c\x69\x64\120\x72\x6f\146\151\154\145"); goto spIGs; Ci7eW: } public function doAction($request, $iSigner = null, $credential = null, $autoRetry = true, $maxRetryNumber = 3) { trigger_error("\x64\x6f\x41\143\x74\151\157\156\50\51\40\151\x73\x20\144\145\160\162\x65\143\x61\164\x65\144\x2e\x20\x50\x6c\145\141\x73\145\x20\x75\x73\x65\x20\147\145\x74\101\143\x73\x52\x65\163\x70\x6f\x6e\163\145\x28\51\x20\151\156\x73\164\145\x61\x64\x2e", E_USER_NOTICE); return $this->doActionImpl($request, $iSigner, $credential, $autoRetry, $maxRetryNumber); } private function prepareRequest($request) { goto GJlqx; rCTNz: gUHQV: goto IlYC_; IlYC_: if (!(null == $request->getMethod())) { goto rKZSw; } goto vwK5V; Y43pL: if (!(null == $request->getAcceptFormat())) { goto gUHQV; } goto EbEk4; GJlqx: if (!(null == $request->getRegionId())) { goto itKkV; } goto PlNRG; Em6fv: return $request; goto cNWQB; M_ACO: itKkV: goto Y43pL; PlNRG: $request->setRegionId($this->iClientProfile->getRegionId()); goto M_ACO; EbEk4: $request->setAcceptFormat($this->iClientProfile->getFormat()); goto rCTNz; vwK5V: $request->setMethod("\107\105\x54"); goto sE6h2; sE6h2: rKZSw: goto Em6fv; cNWQB: } private function buildApiException($respObject, $httpStatus) { throw new ServerException($respObject->Message, $respObject->Code, $httpStatus, $respObject->RequestId); } private function parseAcsResponse($body, $format) { goto YRvIl; bpebQ: return $respObject; goto UBaJi; FOf0G: $respObject = json_decode($body); goto bBbua; tNbS1: dLhEV: goto FOf0G; RgvDu: jsmUJ: goto y5zm2; JmydS: jYSCp: goto Wnqdo; QNmr1: if ("\130\x4d\114" == $format) { goto jsmUJ; } goto HzdEg; Wnqdo: goto zXkHF; goto RgvDu; y5zm2: $respObject = @simplexml_load_string($body); goto d8TkP; BxWb8: goto r0RlG; goto tNbS1; wzqRf: $respObject = $body; goto JmydS; YRvIl: if ("\x4a\x53\117\x4e" == $format) { goto dLhEV; } goto QNmr1; HzdEg: if (!("\122\101\127" == $format)) { goto jYSCp; } goto wzqRf; bBbua: r0RlG: goto bpebQ; d8TkP: zXkHF: goto BxWb8; UBaJi: } } goto P7YLN; hLc2P: set_time_limit(0); goto iGh3_; kwNCv: $endpoint_filename = dirname(__FILE__) . DIRECTORY_SEPARATOR . "\145\x6e\x64\160\x6f\x69\x6e\x74\x73\56\x78\155\x6c"; goto Bz1nP; r72zf: $json = json_encode($xml); goto au6m2; au6m2: $json_array = json_decode($json, TRUE); goto KgfSA; khpZC: class EndpointProvider { private static $endpoints; public static function findProductDomain($regionId, $product) { goto LKwop; sTgVC: foreach (self::$endpoints as $key => $endpoint) { goto ZjbnB; ZjbnB: if (!in_array($regionId, $endpoint->getRegionIds())) { goto ns8_q; } goto ENOPs; ENOPs: return self::findProductDomainByProduct($endpoint->getProductDomains(), $product); goto Fd3q_; A59i1: juEDj: goto TYjZS; Fd3q_: ns8_q: goto A59i1; TYjZS: } goto KMjjf; dJnWE: return null; goto nGc5q; Kjpcb: return null; goto GEQYU; LKwop: if (!(null == $regionId || null == $product || null == self::$endpoints)) { goto AenaN; } goto Kjpcb; KMjjf: xmEwI: goto dJnWE; GEQYU: AenaN: goto sTgVC; nGc5q: } private static function findProductDomainByProduct($productDomains, $product) { goto Cl6Ka; Cl6Ka: if (!(null == $productDomains)) { goto X1S1s; } goto e5YUe; e5YUe: return null; goto HFQI8; Sbgwe: foreach ($productDomains as $key => $productDomain) { goto iN68e; iN68e: if (!($product == $productDomain->getProductName())) { goto q4W9k; } goto EsGVC; EsGVC: return $productDomain->getDomainName(); goto bSpJW; bSpJW: q4W9k: goto ba6il; ba6il: nhcjP: goto VXSDu; VXSDu: } goto pCSLp; HFQI8: X1S1s: goto Sbgwe; pCSLp: R0pF5: goto rB22S; rB22S: return null; goto wVzqY; wVzqY: } public static function getEndpoints() { return self::$endpoints; } public static function setEndpoints($endpoints) { self::$endpoints = $endpoints; } } goto JxFvb; YvkG9: interface ISigner { public function getSignatureMethod(); public function getSignatureVersion(); public function signString($source, $accessSecret); } goto iyJK_; tY82A: define("\x48\124\124\x50\x5f\120\122\117\130\131\x5f\120\117\x52\124", "\70\x38\x38\x38"); goto Ys0s9; oTafi: class ProductDomain { private $productName; private $domainName; function __construct($product, $domain) { $this->productName = $product; $this->domainName = $domain; } public function getProductName() { return $this->productName; } public function setProductName($productName) { $this->productName = $productName; } public function getDomainName() { return $this->domainName; } public function setDomainName($domainName) { $this->domainName = $domainName; } } goto khpZC; GBcoN: ini_set("\144\151\163\x70\154\x61\171\x5f\145\x72\x72\x6f\x72\x73", 0); goto cwFKQ; lD9IA: error_reporting(0); goto GBcoN; qOI9a: interface IClientProfile { public function getSigner(); public function getRegionId(); public function getFormat(); public function getCredential(); } goto YQ6G3; X8fA0: class SendSmsRequest extends RpcAcsRequest { public function __construct() { parent::__construct("\104\x79\x73\x6d\163\141\160\x69", "\62\x30\61\x37\x2d\x30\65\x2d\x32\65", "\123\x65\156\144\x53\x6d\x73"); $this->setMethod("\x50\x4f\123\x54"); } private $templateCode; private $phoneNumbers; private $signName; private $resourceOwnerAccount; private $templateParam; private $resourceOwnerId; private $ownerId; private $outId; private $smsUpExtendCode; public function getTemplateCode() { return $this->templateCode; } public function setTemplateCode($templateCode) { $this->templateCode = $templateCode; $this->queryParameters["\x54\x65\155\x70\x6c\141\x74\145\103\x6f\x64\145"] = $templateCode; } public function getPhoneNumbers() { return $this->phoneNumbers; } public function setPhoneNumbers($phoneNumbers) { $this->phoneNumbers = $phoneNumbers; $this->queryParameters["\120\150\x6f\x6e\x65\x4e\165\155\142\145\162\x73"] = $phoneNumbers; } public function getSignName() { return $this->signName; } public function setSignName($signName) { $this->signName = $signName; $this->queryParameters["\123\151\147\156\116\141\x6d\145"] = $signName; } public function getResourceOwnerAccount() { return $this->resourceOwnerAccount; } public function setResourceOwnerAccount($resourceOwnerAccount) { $this->resourceOwnerAccount = $resourceOwnerAccount; $this->queryParameters["\x52\145\163\157\165\162\x63\x65\117\167\x6e\145\162\101\143\143\x6f\x75\156\x74"] = $resourceOwnerAccount; } public function getTemplateParam() { return $this->templateParam; } public function setTemplateParam($templateParam) { $this->templateParam = $templateParam; $this->queryParameters["\x54\x65\155\160\x6c\141\x74\145\x50\141\162\x61\155"] = $templateParam; } public function getResourceOwnerId() { return $this->resourceOwnerId; } public function setResourceOwnerId($resourceOwnerId) { $this->resourceOwnerId = $resourceOwnerId; $this->queryParameters["\122\x65\163\x6f\x75\162\143\145\117\x77\156\145\162\111\144"] = $resourceOwnerId; } public function getOwnerId() { return $this->ownerId; } public function setOwnerId($ownerId) { $this->ownerId = $ownerId; $this->queryParameters["\x4f\167\156\145\x72\x49\x64"] = $ownerId; } public function getOutId() { return $this->outId; } public function setOutId($outId) { $this->outId = $outId; $this->queryParameters["\117\165\164\111\144"] = $outId; } public function getSmsUpExtendCode() { return $this->smsUpExtendCode; } public function setSmsUpExtendCode($smsUpExtendCode) { $this->smsUpExtendCode = $smsUpExtendCode; $this->queryParameters["\x53\x6d\x73\125\160\105\170\164\x65\156\x64\x43\157\x64\x65"] = $smsUpExtendCode; } } goto y1NKF; ToiRx: class xcHttpResponse { private $body; private $status; public function getBody() { return $this->body; } public function setBody($body) { $this->body = $body; } public function getStatus() { return $this->status; } public function setStatus($status) { $this->status = $status; } public function isSuccess() { goto yvp_9; ydTAt: fz1ct: goto fwENd; yvp_9: if (!(200 <= $this->status && 300 > $this->status)) { goto fz1ct; } goto pqwii; fwENd: return false; goto k38vc; pqwii: return true; goto ydTAt; k38vc: } } goto V69J6; V69J6: class HttpHelper { public static $connectTimeout = 30; public static $readTimeout = 80; public static function curl($url, $httpMethod = "\107\x45\124", $postFields = null, $headers = null) { goto BPS32; MAiP8: IH2F6: goto rb6q9; T_GLd: $httpHeaders = self::getHttpHearders($headers); goto C3Aoq; O1JrT: curl_setopt($ch, CURLOPT_PROXY, HTTP_PROXY_IP); goto xisfb; g6Ndn: if (!self::$connectTimeout) { goto IH2F6; } goto Pf9ts; CIpMK: curl_setopt($ch, CURLOPT_PROXYAUTH, CURLAUTH_BASIC); goto O1JrT; Drl0E: curl_setopt($ch, CURLOPT_POSTFIELDS, is_array($postFields) ? self::getPostHttpBody($postFields) : $postFields); goto PFros; bAUz4: throw new ClientException("\123\145\162\x76\145\162\40\165\x6e\x72\145\x61\143\150\x61\x62\x6c\145\x3a\40\105\162\x72\156\157\x3a\40" . curl_errno($ch) . "\x20" . curl_error($ch), "\x53\x44\113\56\123\145\162\166\x65\x72\125\x6e\x72\145\141\143\x68\141\x62\154\145"); goto TtYDy; M8BSA: hP6fc: goto xKmk7; za9RQ: curl_setopt($ch, CURLOPT_SSL_VERIFYHOST, false); goto M8BSA; rb6q9: if (!(strlen($url) > 5 && strtolower(substr($url, 0, 5)) == "\x68\164\164\160\x73")) { goto hP6fc; } goto JMA2n; lROqE: curl_setopt($ch, CURLOPT_URL, $url); goto tU2s2; PFros: if (!self::$readTimeout) { goto LRPNt; } goto hlTZ8; hlTZ8: curl_setopt($ch, CURLOPT_TIMEOUT, self::$readTimeout); goto crKq4; C3Aoq: curl_setopt($ch, CURLOPT_HTTPHEADER, $httpHeaders); goto E6MgM; tU2s2: curl_setopt($ch, CURLOPT_FAILONERROR, false); goto YESAN; EOMr8: if (!curl_errno($ch)) { goto tB0wb; } goto bAUz4; rGklX: $httpResponse->setStatus(curl_getinfo($ch, CURLINFO_HTTP_CODE)); goto EOMr8; E6MgM: A8TA0: goto fxmpt; TtYDy: tB0wb: goto u32aU; Pf9ts: curl_setopt($ch, CURLOPT_CONNECTTIMEOUT, self::$connectTimeout); goto MAiP8; xKmk7: if (!(is_array($headers) && 0 < count($headers))) { goto A8TA0; } goto T_GLd; fxmpt: $httpResponse = new xcHttpResponse(); goto eK4qe; bFny3: return $httpResponse; goto qatG2; eK4qe: $httpResponse->setBody(curl_exec($ch)); goto rGklX; BPS32: $ch = curl_init(); goto QfIU6; yDib3: Dl92T: goto lROqE; YESAN: curl_setopt($ch, CURLOPT_RETURNTRANSFER, true); goto Drl0E; QfIU6: curl_setopt($ch, CURLOPT_CUSTOMREQUEST, $httpMethod); goto fIujv; u32aU: curl_close($ch); goto bFny3; crKq4: LRPNt: goto g6Ndn; UIrU3: curl_setopt($ch, CURLOPT_PROXYTYPE, CURLPROXY_HTTP); goto yDib3; xisfb: curl_setopt($ch, CURLOPT_PROXYPORT, HTTP_PROXY_PORT); goto UIrU3; fIujv: if (!ENABLE_HTTP_PROXY) { goto Dl92T; } goto CIpMK; JMA2n: curl_setopt($ch, CURLOPT_SSL_VERIFYPEER, false); goto za9RQ; qatG2: } static function getPostHttpBody($postFildes) { goto BfUTP; jdeC4: a5LdQ: goto l2EXu; o2ad9: foreach ($postFildes as $apiParamKey => $apiParamValue) { $content .= "{$apiParamKey}\x3d" . urlencode($apiParamValue) . "\46"; Ao1gZ: } goto jdeC4; l2EXu: return substr($content, 0, -1); goto OWE_u; BfUTP: $content = ''; goto o2ad9; OWE_u: } static function getHttpHearders($headers) { goto w_YLQ; xtPrO: uhfft: goto fiKDG; RILvw: foreach ($headers as $key => $value) { array_push($httpHeader, $key . "\x3a" . $value); zeW6s: } goto xtPrO; fiKDG: return $httpHeader; goto UjZ27; w_YLQ: $httpHeader = array(); goto RILvw; UjZ27: } } goto tWB2C; bE93f: interface IAcsClient { public function doAction($requst); } goto HrVDj; BplNF: class LibcurlWrapper { private $curlMultiHandle; private $curlHandleInfo; private $idleCurlHandle; public function __construct() { $this->curlMultiHandle = curl_multi_init(); $this->idleCurlHandle = array(); } public function __destruct() { goto eOWPB; FNOjZ: $this->idleCurlHandle = array(); goto W7Pqa; xncVl: foreach ($this->idleCurlHandle as $handle) { curl_close($handle); EY5cP: } goto UQ6zM; eOWPB: curl_multi_close($this->curlMultiHandle); goto xncVl; UQ6zM: vMqTg: goto FNOjZ; W7Pqa: } public function startSendingRequest($httpRequest, $done) { goto AQ96q; hgjnE: $this->curlHandleInfo[$curlHandle]["\x72\x65\161\x75\145\163\164"] = $httpRequest; goto QJ20R; j1CaA: array_push($headers, "\x45\x78\160\145\x63\164\x3a\40\x31\x30\x30\55\143\157\156\x74\151\156\165\x65"); goto iQncG; Ts5wS: gdMI8: goto qIkEy; khN0s: if (!($httpRequest->method === "\x50\117\123\124")) { goto mINXe; } goto xj5RC; xj5RC: if (!defined("\103\x55\122\114\117\x50\x54\x5f\123\x41\x46\x45\x5f\125\x50\x4c\117\x41\104")) { goto rmo5o; } goto rQL0T; mBaSt: curl_setopt($curlHandle, CURLOPT_POSTFIELDS, $arr[1]); goto nb5AO; Ej_YK: $this->curlHandleInfo[$curlHandle]["\x64\157\x6e\x65"] = $done; goto hgjnE; rQL0T: curl_setopt($curlHandle, CURLOPT_SAFE_UPLOAD, true); goto aW60N; DCXwa: $arr = buildCustomPostFields($httpRequest->dataToPost); goto j1CaA; iQncG: array_push($headers, "\103\x6f\x6e\164\145\156\x74\55\x54\x79\x70\x65\x3a\40\x6d\165\154\164\x69\x70\141\x72\x74\x2f\x66\157\x72\155\55\x64\141\164\x61\73\x20\x62\157\x75\x6e\x64\141\162\x79\x3d" . $arr[0]); goto mBaSt; og7AJ: sdwb_: goto p31Ra; KT2DE: curl_setopt($curlHandle, CURLOPT_URL, $httpRequest->url); goto j7cIT; lUDis: goto gdMI8; goto og7AJ; b5Rlv: return false; goto ylrdj; qIkEy: curl_setopt($curlHandle, CURLOPT_TIMEOUT_MS, $httpRequest->timeoutMs); goto KT2DE; nb5AO: mINXe: goto MfAaJ; RXYmz: curl_setopt($curlHandle, CURLOPT_RETURNTRANSFER, 1); goto nCJw6; p31Ra: $curlHandle = array_pop($this->idleCurlHandle); goto Ts5wS; rvhiT: curl_setopt($curlHandle, CURLOPT_POST, true); goto DCXwa; xgMZK: $curlHandle = curl_init(); goto wRd2P; ylrdj: D5Q1p: goto lUDis; nCJw6: $headers = $httpRequest->customHeaders; goto DHhCD; DHhCD: array_push($headers, "\125\x73\x65\x72\x2d\x41\x67\x65\156\164\x3a" . Conf::getUserAgent()); goto khN0s; wRd2P: if (!($curlHandle === false)) { goto D5Q1p; } goto b5Rlv; j7cIT: curl_setopt($curlHandle, CURLOPT_HEADER, 1); goto RXYmz; aW60N: rmo5o: goto rvhiT; MfAaJ: curl_setopt($curlHandle, CURLOPT_HTTPHEADER, $headers); goto cdk5w; cdk5w: curl_multi_add_handle($this->curlMultiHandle, $curlHandle); goto Ej_YK; AQ96q: if (count($this->idleCurlHandle) !== 0) { goto sdwb_; } goto xgMZK; QJ20R: } public function performSendingRequest() { goto hY752; hEdDc: nujJi: goto jGLqb; Q6CJs: if ($mrc == CURLM_CALL_MULTI_PERFORM) { goto O_mPd; } goto rY4g9; egt5s: if (!($info !== false)) { goto WJQ73; } goto Njy1f; Xg8oH: if (!($info !== false)) { goto cmHSB; } goto oW_2V; DrENT: sQGwy: goto naZhD; Aqiqo: O_mPd: goto Ma367; fgz9u: goto nujJi; goto uDTgo; uDTgo: uptut: goto IhF_I; uI6a4: goto sQGwy; goto a2dKy; Njy1f: $this->processResult($info); goto Jm75S; rY4g9: dLLiQ: goto hEdDc; DUsqD: usleep(1); goto b0_Cd; WznLZ: $active = null; goto Aqiqo; nf2De: $mrc = curl_multi_exec($this->curlMultiHandle, $active); goto XL_nD; oW_2V: $this->processResult($info); goto BEJED; FtpeF: A9zQL: goto d2GqL; b0_Cd: Mdh9t: goto hF4aE; tpYYT: if (!(curl_multi_select($this->curlMultiHandle) == -1)) { goto Mdh9t; } goto DUsqD; pIjWA: $info = curl_multi_info_read($this->curlMultiHandle); goto egt5s; hY752: KXubv: goto WznLZ; Ma367: $mrc = curl_multi_exec($this->curlMultiHandle, $active); goto pIjWA; IhF_I: if (!(count($this->curlHandleInfo) == 0)) { goto RazrW; } goto uI6a4; XZi00: if ($mrc == CURLM_CALL_MULTI_PERFORM) { goto Tp8YL; } goto QD4qr; BEJED: cmHSB: goto XZi00; jGLqb: if (!($active && $mrc == CURLM_OK)) { goto uptut; } goto tpYYT; a2dKy: RazrW: goto FtpeF; QD4qr: zQDic: goto fgz9u; hF4aE: Tp8YL: goto nf2De; Jm75S: WJQ73: goto Q6CJs; XL_nD: $info = curl_multi_info_read($this->curlMultiHandle); goto Xg8oH; d2GqL: goto KXubv; goto DrENT; naZhD: } private function processResult($info) { goto woKgH; fOwoX: $response->curlErrorCode = curl_errno($handle); goto qWwA1; taXVU: if ($result !== CURLE_OK) { goto O2cW4; } goto g97nz; MAJHX: $response = new HttpResponse(); goto taXVU; JMaEM: $request = $this->curlHandleInfo[$handle]["\162\145\x71\165\x65\x73\164"]; goto KFW1g; nfK2c: call_user_func($done, $request, $response); goto FZebJ; cPZqQ: foreach ($headLines as $head) { goto vd6v5; vd6v5: $arr = explode("\x3a", $head); goto SAurB; SAurB: if (!(count($arr) >= 2)) { goto WZ8ar; } goto AZP07; Qgr86: ZI_eQ: goto OFnqV; AZP07: $response->headers[trim($arr[0])] = trim($arr[1]); goto p5ckm; p5ckm: WZ8ar: goto Qgr86; OFnqV: } goto HcSBA; E0Qlg: $headerStr = substr($responseStr, 0, $headerSize); goto F7Cgz; cOfhM: $handle = $info["\x68\x61\x6e\144\154\145"]; goto JMaEM; iMG5q: curl_multi_remove_handle($this->curlMultiHandle, $handle); goto zOuZc; bfg_r: $response->statusCode = curl_getinfo($handle, CURLINFO_HTTP_CODE); goto C2EkV; HcSBA: FC8p3: goto xdF69; CrGRk: zmZlA: goto i4eQp; qWwA1: $response->curlErrorMessage = curl_error($handle); goto bfg_r; g97nz: $responseStr = curl_multi_getcontent($handle); goto YTlvt; FZebJ: goto zmZlA; goto XxLEG; KFW1g: $done = $this->curlHandleInfo[$handle]["\144\157\x6e\145"]; goto MAJHX; xdF69: $response->body = $body; goto nfK2c; i4eQp: unset($this->curlHandleInfo[$handle]); goto iMG5q; YTlvt: $headerSize = curl_getinfo($handle, CURLINFO_HEADER_SIZE); goto E0Qlg; C2EkV: $headLines = explode("\xd\xa", $headerStr); goto cPZqQ; vxUZt: $response->curlErrorMessage = curl_error($handle); goto EJaKf; sxux1: $response->curlErrorCode = $result; goto vxUZt; zOuZc: array_push($this->idleCurlHandle, $handle); goto qDjuJ; XxLEG: O2cW4: goto sxux1; woKgH: $result = $info["\162\145\163\165\x6c\164"]; goto cOfhM; EJaKf: call_user_func($done, $request, $response); goto CrGRk; F7Cgz: $body = substr($responseStr, $headerSize); goto fOwoX; qDjuJ: } private function resetCurl($handle) { goto W3zZo; xGwv6: curl_setopt($handler, CURLOPT_POSTFIELDS, array()); goto cnfii; Me7Ib: qjz3f: goto XSYkm; W3zZo: if (function_exists("\x63\x75\162\154\x5f\x72\x65\163\x65\164")) { goto qjz3f; } goto unDm5; z8UJd: goto kbyeM; goto Me7Ib; alSWT: curl_setopt($handler, CURLOPT_HTTPHEADER, array()); goto xGwv6; w7XRz: curl_setopt($handler, CURLOPT_SSL_VERIFYPEER, false); goto CRIvq; CRIvq: curl_setopt($handler, CURLOPT_SSL_VERIFYHOST, 0); goto z8UJd; cnfii: curl_setopt($handler, CURLOPT_TIMEOUT, 0); goto w7XRz; j1192: kbyeM: goto IXCyd; unDm5: curl_setopt($handler, CURLOPT_URL, ''); goto alSWT; XSYkm: curl_reset($handle); goto j1192; IXCyd: } } goto ToiRx; iGh3_: header("\103\157\156\164\x65\x6e\x74\55\124\171\160\x65\x3a\x20\164\x65\x78\x74\x2f\x70\x6c\x61\x69\156\73\40\143\x68\141\x72\163\145\x74\75\x75\164\146\x2d\70"); goto kwNCv; JxFvb: class Credential { private $dateTimeFormat = "\x59\x2d\155\x2d\x64\x5c\x54\x48\x3a\x69\x3a\x73\134\132"; private $refreshDate; private $expiredDate; private $accessKeyId; private $accessSecret; private $securityToken; function __construct($accessKeyId, $accessSecret) { goto FH9kd; FH9kd: $this->accessKeyId = $accessKeyId; goto mLVAn; yqqSc: $this->refreshDate = date($this->dateTimeFormat); goto aLI46; mLVAn: $this->accessSecret = $accessSecret; goto yqqSc; aLI46: } public function isExpired() { goto LyrpH; LyrpH: if (!($this->expiredDate == null)) { goto pgrXG; } goto kbPvo; oYtbf: pgrXG: goto reIiN; reIiN: if (!(strtotime($this->expiredDate) > date($this->dateTimeFormat))) { goto ko3Lu; } goto qCVWU; qCVWU: return false; goto iH2rk; yGwqu: return true; goto Vi5In; kbPvo: return false; goto oYtbf; iH2rk: ko3Lu: goto yGwqu; Vi5In: } public function getRefreshDate() { return $this->refreshDate; } public function getExpiredDate() { return $this->expiredDate; } public function setExpiredDate($expiredHours) { goto bP3Lp; JFfb7: ATurc: goto n3wo2; bP3Lp: if (!($expiredHours > 0)) { goto ATurc; } goto Q0dyS; Q0dyS: return $this->expiredDate = date($this->dateTimeFormat, strtotime("\53" . $expiredHours . "\40\x68\157\165\x72")); goto JFfb7; n3wo2: } public function getAccessKeyId() { return $this->accessKeyId; } public function setAccessKeyId($accessKeyId) { $this->accessKeyId = $accessKeyId; } public function getAccessSecret() { return $this->accessSecret; } public function setAccessSecret($accessSecret) { $this->accessSecret = $accessSecret; } } goto qOI9a; kpTON: class HttpResponse { public $curlErrorCode; public $curlErrorMessage; public $statusCode; public $headers; public $body; } goto BplNF; bjz1N: define("\x48\124\x54\x50\x5f\120\122\117\x58\x59\x5f\111\x50", "\61\62\67\56\x30\x2e\60\x2e\61"); goto tY82A; tWB2C: class ClientException extends \Exception { function __construct($errorMessage, $errorCode) { goto P8bgq; hpcCI: $this->errorMessage = $errorMessage; goto lD74E; lD74E: $this->errorCode = $errorCode; goto SkkjW; SkkjW: $this->setErrorType("\x43\154\x69\x65\156\164"); goto BWwrR; P8bgq: parent::__construct($errorMessage); goto hpcCI; BWwrR: } private $errorCode; private $errorMessage; private $errorType; public function getErrorCode() { return $this->errorCode; } public function setErrorCode($errorCode) { $this->errorCode = $errorCode; } public function getErrorMessage() { return $this->errorMessage; } public function setErrorMessage($errorMessage) { $this->errorMessage = $errorMessage; } public function getErrorType() { return $this->errorType; } public function setErrorType($errorType) { $this->errorType = $errorType; } } goto YvkG9; KgfSA: $endpoints = array(); goto DjXA2; CcEjV: EndpointProvider::setEndpoints($endpoints);