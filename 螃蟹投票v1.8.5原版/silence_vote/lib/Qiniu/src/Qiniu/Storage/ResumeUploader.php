<?php
 namespace Qiniu\Storage; use Qiniu\Config; use Qiniu\Http\Client; use Qiniu\Http\Error; final class ResumeUploader { private $upToken; private $key; private $inputStream; private $size; private $params; private $mime; private $contexts; private $host; private $currentUrl; private $config; public function __construct($upToken, $key, $inputStream, $size, $params, $mime, $config) { goto NZrjq; wHSWS: $this->key = $key; goto M8fWX; QmoJ9: $upHost = $config->getUpHost($accessKey, $bucket); goto SWKou; kIFV_: $this->mime = $mime; goto vHETx; MGrSa: throw new \Exception($err->message(), 1); goto MgIud; SWKou: if (!($err != null)) { goto K9IsW; } goto MGrSa; M8fWX: $this->inputStream = $inputStream; goto XxVVd; vHETx: $this->contexts = array(); goto iF3gF; XxVVd: $this->size = $size; goto KSxe7; oIxuA: return array(null, $err); goto Ne6Zq; Ne6Zq: p3cPY: goto QmoJ9; MgIud: K9IsW: goto z869Q; PQM6p: if (!($err != null)) { goto p3cPY; } goto oIxuA; KSxe7: $this->params = $params; goto kIFV_; iF3gF: $this->config = $config; goto AjY4U; z869Q: $this->host = $upHost; goto x7ZMg; NZrjq: $this->upToken = $upToken; goto wHSWS; AjY4U: list($accessKey, $bucket, $err) = \Qiniu\explodeUpToken($upToken); goto PQM6p; x7ZMg: } public function upload($fname) { goto fY0Pe; gHrxS: iw_7d: goto uzs1D; uzs1D: array_push($this->contexts, $ret["\x63\x74\170"]); goto kKVOy; DXD7U: $response = $this->makeBlock($data, $blockSize); goto GmOox; Zqn8B: W1SZZ: goto Yex8n; zNGnl: KfHWk: goto rUJiw; GmOox: $ret = null; goto ojXIf; r4hTd: $crc = \Qiniu\crc32_data($data); goto DXD7U; sdFPN: if (!($response->needRetry() || !isset($ret["\143\x72\143\x33\x32"]) || $crc != $ret["\x63\162\143\63\x32"])) { goto n_F1l; } goto p1fTd; hjf1R: $ret = $response->json(); goto VA3sL; b1vkw: NwtdB: goto r4hTd; p1fTd: $response = $this->makeBlock($data, $blockSize); goto hjf1R; S9TX0: if (!($err != null)) { goto xF_7L; } goto ORhaS; NNUSb: list($accessKey, $bucket, $err) = \Qiniu\explodeUpToken($this->upToken); goto S9TX0; kuShX: $blockSize = $this->blockSize($uploaded); goto SZUSe; C7XEK: if (!(!$response->ok() || !isset($ret["\143\162\143\x33\x32"]) || $crc != $ret["\x63\x72\143\x33\62"])) { goto iw_7d; } goto kZkL8; rsq0_: xF_7L: goto nK_Z0; T385s: if (!($uploaded < $this->size)) { goto KfHWk; } goto kuShX; GAb_V: $this->host = $upHostBackup; goto lbo8C; kKVOy: $uploaded += $blockSize; goto U0EyV; fY0Pe: $uploaded = 0; goto fvmws; fvmws: NjRv8: goto T385s; SZUSe: $data = fread($this->inputStream, $blockSize); goto YRJSL; kZkL8: return array(null, new Error($this->currentUrl, $response)); goto gHrxS; ojXIf: if (!($response->ok() && $response->json() != null)) { goto W1SZZ; } goto OuvvQ; OuvvQ: $ret = $response->json(); goto Zqn8B; lbo8C: JJpPQ: goto sdFPN; rUJiw: return $this->makeFile($fname); goto pkQmJ; NCuQp: throw new \Exception("\146\151\x6c\145\x20\162\145\x61\x64\x20\146\141\x69\x6c\145\x64", 1); goto b1vkw; nK_Z0: $upHostBackup = $this->config->getUpBackupHost($accessKey, $bucket); goto GAb_V; VA3sL: n_F1l: goto C7XEK; Yex8n: if (!($response->statusCode < 0)) { goto JJpPQ; } goto NNUSb; YRJSL: if (!($data === false)) { goto NwtdB; } goto NCuQp; ORhaS: return array(null, $err); goto rsq0_; U0EyV: goto NjRv8; goto zNGnl; pkQmJ: } private function makeBlock($block, $blockSize) { $url = $this->host . "\x2f\x6d\153\142\x6c\x6b\57" . $blockSize; return $this->post($url, $block); } private function fileUrl($fname) { goto u5YvL; uHcz7: $url .= "\x2f\153\x65\171\57" . \Qiniu\base64_urlSafeEncode($this->key); goto vpzv1; bZRfH: return $url; goto gWxeY; KKWxw: foreach ($this->params as $key => $value) { goto ZSGpi; AzkaN: $url .= "\x2f{$key}\x2f{$val}"; goto qbJ5h; qbJ5h: n9fc_: goto RnE9Y; ZSGpi: $val = \Qiniu\base64_urlSafeEncode($value); goto AzkaN; RnE9Y: } goto reEao; vpzv1: t5HVK: goto fjxJN; unxBE: EeHlS: goto bZRfH; u5YvL: $url = $this->host . "\x2f\155\153\146\151\x6c\x65\57" . $this->size; goto Pg7Gi; Pg7Gi: $url .= "\x2f\x6d\151\x6d\x65\124\x79\x70\x65\x2f" . \Qiniu\base64_urlSafeEncode($this->mime); goto z6gN7; reEao: DBt0w: goto unxBE; fjxJN: $url .= "\57\146\156\141\155\145\x2f" . \Qiniu\base64_urlSafeEncode($fname); goto bUN7c; bUN7c: if (empty($this->params)) { goto EeHlS; } goto KKWxw; z6gN7: if (!($this->key != null)) { goto t5HVK; } goto uHcz7; gWxeY: } private function makeFile($fname) { goto jGmae; kVPop: $body = implode("\54", $this->contexts); goto FHQPn; WtAVM: if (!$response->needRetry()) { goto WDOjb; } goto bHZ6Y; FHQPn: $response = $this->post($url, $body); goto WtAVM; XyEz6: JBaGp: goto xjdpi; bzcyl: if ($response->ok()) { goto JBaGp; } goto eVu8_; jGmae: $url = $this->fileUrl($fname); goto kVPop; bHZ6Y: $response = $this->post($url, $body); goto tSgmO; tSgmO: WDOjb: goto bzcyl; eVu8_: return array(null, new Error($this->currentUrl, $response)); goto XyEz6; xjdpi: return array($response->json(), null); goto oZpfb; oZpfb: } private function post($url, $data) { goto weS4T; weS4T: $this->currentUrl = $url; goto eKLq7; eKLq7: $headers = array("\x41\x75\x74\150\157\x72\151\x7a\141\164\151\x6f\x6e" => "\125\160\x54\157\153\145\x6e\40" . $this->upToken); goto fUOlz; fUOlz: return Client::post($url, $data, $headers); goto cNQqu; cNQqu: } private function blockSize($uploaded) { goto S3LyH; meDhi: pa6AG: goto SAqYr; S3LyH: if (!($this->size < $uploaded + Config::BLOCK_SIZE)) { goto pa6AG; } goto HOuqw; SAqYr: return Config::BLOCK_SIZE; goto LiQUt; HOuqw: return $this->size - $uploaded; goto meDhi; LiQUt: } }