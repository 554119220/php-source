<?php
 namespace Qiniu\Storage; use Qiniu\Auth; use Qiniu\Config; use Qiniu\Zone; use Qiniu\Http\Client; use Qiniu\Http\Error; final class BucketManager { private $auth; private $config; public function __construct(Auth $auth, Config $config = null) { goto mCv33; la0Dg: $this->config = $config; goto K5Jvp; Ytw6r: TCX6G: goto yoajz; DEsD8: YgJ4h: goto RsPmo; RsPmo: $this->config = new Config(); goto Ytw6r; K5Jvp: goto TCX6G; goto DEsD8; mCv33: $this->auth = $auth; goto MigH2; MigH2: if ($config == null) { goto YgJ4h; } goto la0Dg; yoajz: } public function buckets($shared = true) { goto MWY3l; tN1uA: return $this->rsGet("\x2f\x62\x75\x63\153\145\x74\x73\x3f\163\x68\141\x72\145\x64\75" . $includeShared); goto w7bu9; MWY3l: $includeShared = "\x66\x61\154\x73\145"; goto lef8E; NHan9: I8qEt: goto tN1uA; dXlji: $includeShared = "\x74\x72\165\x65"; goto NHan9; lef8E: if (!($shared === true)) { goto I8qEt; } goto dXlji; w7bu9: } public function domains($bucket) { return $this->apiGet("\x2f\x76\x36\x2f\144\x6f\155\141\x69\x6e\x2f\x6c\151\163\164\77\x74\x62\x6c\x3d" . $bucket); } public function listFiles($bucket, $prefix = null, $marker = null, $limit = 1000, $delimiter = null) { goto PB6do; EO7rX: \Qiniu\setWithoutEmpty($query, "\144\x65\x6c\151\155\x69\164\145\162", $delimiter); goto G2DVU; FDrtO: \Qiniu\setWithoutEmpty($query, "\155\141\x72\153\145\x72", $marker); goto myI3k; G2DVU: $url = $this->getRsfHost() . "\x2f\x6c\151\x73\x74\x3f" . http_build_query($query); goto qnZbZ; PTAmn: \Qiniu\setWithoutEmpty($query, "\x70\162\x65\146\151\170", $prefix); goto FDrtO; myI3k: \Qiniu\setWithoutEmpty($query, "\x6c\x69\x6d\x69\164", $limit); goto EO7rX; PB6do: $query = array("\x62\165\143\153\x65\164" => $bucket); goto PTAmn; qnZbZ: return $this->get($url); goto opTdm; opTdm: } public function stat($bucket, $key) { $path = "\57\x73\x74\141\164\x2f" . \Qiniu\entry($bucket, $key); return $this->rsGet($path); } public function delete($bucket, $key) { goto cnjzM; wiWUo: list(, $error) = $this->rsPost($path); goto tILL0; tILL0: return $error; goto IeGYU; cnjzM: $path = "\x2f\144\x65\154\145\x74\145\x2f" . \Qiniu\entry($bucket, $key); goto wiWUo; IeGYU: } public function rename($bucket, $oldname, $newname) { return $this->move($bucket, $oldname, $bucket, $newname); } public function copy($from_bucket, $from_key, $to_bucket, $to_key, $force = false) { goto qw5bq; ctR6r: $to = \Qiniu\entry($to_bucket, $to_key); goto hQqBI; mwSUq: $path .= "\x2f\x66\x6f\162\x63\145\57\x74\162\165\145"; goto i_s1J; ywXy2: if (!($force === true)) { goto WHNqC; } goto mwSUq; hQqBI: $path = "\57\x63\157\x70\x79\57" . $from . "\x2f" . $to; goto ywXy2; qw5bq: $from = \Qiniu\entry($from_bucket, $from_key); goto ctR6r; Fn0Y6: return $error; goto bQv9L; W4Zom: list(, $error) = $this->rsPost($path); goto Fn0Y6; i_s1J: WHNqC: goto W4Zom; bQv9L: } public function move($from_bucket, $from_key, $to_bucket, $to_key, $force = false) { goto cZaV7; wp7PM: $path .= "\x2f\x66\157\162\143\145\x2f\x74\162\165\145"; goto Y3tW3; SUP64: $to = \Qiniu\entry($to_bucket, $to_key); goto ZPD5G; a1w9F: list(, $error) = $this->rsPost($path); goto R2QK2; cZaV7: $from = \Qiniu\entry($from_bucket, $from_key); goto SUP64; R2QK2: return $error; goto Ec3qS; Y3tW3: Ujl28: goto a1w9F; QIqJR: if (!$force) { goto Ujl28; } goto wp7PM; ZPD5G: $path = "\x2f\155\157\166\145\x2f" . $from . "\57" . $to; goto QIqJR; Ec3qS: } public function changeMime($bucket, $key, $mime) { goto xmcoo; GjDqy: list(, $error) = $this->rsPost($path); goto wIuOt; yzhok: $path = "\x2f\x63\150\147\x6d\57" . $resource . "\57\x6d\x69\x6d\145\x2f" . $encode_mime; goto GjDqy; r2haM: $encode_mime = \Qiniu\base64_urlSafeEncode($mime); goto yzhok; xmcoo: $resource = \Qiniu\entry($bucket, $key); goto r2haM; wIuOt: return $error; goto rvgm_; rvgm_: } public function changeType($bucket, $key, $fileType) { goto FRSJg; FRSJg: $resource = \Qiniu\entry($bucket, $key); goto y1xnZ; wbW0L: list(, $error) = $this->rsPost($path); goto usoU4; usoU4: return $error; goto SjGMt; y1xnZ: $path = "\x2f\143\150\164\x79\160\145\57" . $resource . "\x2f\x74\171\160\x65\57" . $fileType; goto wbW0L; SjGMt: } public function changeStatus($bucket, $key, $status) { goto lv2jW; tnbib: return $error; goto n7dtm; oqghQ: list(, $error) = $this->rsPost($path); goto tnbib; lv2jW: $resource = \Qiniu\entry($bucket, $key); goto tWENv; tWENv: $path = "\57\x63\x68\x73\x74\141\164\x75\x73\57" . $resource . "\57\x73\164\141\164\165\163\x2f" . $status; goto oqghQ; n7dtm: } public function fetch($url, $bucket, $key = null) { goto LSvtS; FPK1e: $url = $ioHost . $path; goto aIqpD; QlI7t: $ioHost = $this->config->getIovipHost($ak, $bucket); goto FPK1e; dme8S: $path = "\57\x66\x65\164\143\x68\x2f" . $resource . "\x2f\164\157\57" . $to; goto jfTCa; qb685: $to = \Qiniu\entry($bucket, $key); goto dme8S; jfTCa: $ak = $this->auth->getAccessKey(); goto QlI7t; LSvtS: $resource = \Qiniu\base64_urlSafeEncode($url); goto qb685; aIqpD: return $this->post($url, null); goto c_IMB; c_IMB: } public function prefetch($bucket, $key) { goto OSB5C; OSB5C: $resource = \Qiniu\entry($bucket, $key); goto OPi2O; t_97Z: list(, $error) = $this->post($url, null); goto DnJPh; OPi2O: $path = "\x2f\160\x72\x65\x66\x65\164\x63\150\x2f" . $resource; goto nYvxo; fkhtF: $ioHost = $this->config->getIovipHost($ak, $bucket); goto wUuRV; wUuRV: $url = $ioHost . $path; goto t_97Z; DnJPh: return $error; goto WV4Bj; nYvxo: $ak = $this->auth->getAccessKey(); goto fkhtF; WV4Bj: } public function batch($operations) { $params = "\x6f\160\75" . implode("\x26\157\x70\75", $operations); return $this->rsPost("\57\x62\141\x74\x63\x68", $params); } public function deleteAfterDays($bucket, $key, $days) { goto Y2pvz; RNbbI: list(, $error) = $this->rsPost($path); goto rcBVO; Y2pvz: $entry = \Qiniu\entry($bucket, $key); goto xENjH; xENjH: $path = "\x2f\144\145\x6c\145\x74\145\x41\146\x74\x65\162\104\x61\x79\x73\x2f{$entry}\57{$days}"; goto RNbbI; rcBVO: return $error; goto QqstR; QqstR: } private function getRsfHost() { goto qBAm2; jzFzK: return $scheme . Config::RSF_HOST; goto I8o5F; gL9Zg: if (!($this->config->useHTTPS == true)) { goto biVbK; } goto u48rD; u48rD: $scheme = "\x68\x74\x74\x70\x73\72\x2f\x2f"; goto o7wYV; o7wYV: biVbK: goto jzFzK; qBAm2: $scheme = "\x68\x74\x74\160\x3a\x2f\x2f"; goto gL9Zg; I8o5F: } private function getRsHost() { goto ii2iG; ii2iG: $scheme = "\150\164\x74\160\x3a\x2f\x2f"; goto gZdnj; HnFT9: return $scheme . Config::RS_HOST; goto crL34; UETgJ: $scheme = "\x68\164\164\160\163\x3a\x2f\x2f"; goto Pm3jh; Pm3jh: rfv4H: goto HnFT9; gZdnj: if (!($this->config->useHTTPS == true)) { goto rfv4H; } goto UETgJ; crL34: } private function getApiHost() { goto x8snm; x8snm: $scheme = "\150\164\x74\160\x3a\57\57"; goto gjj7Y; bFwms: $scheme = "\150\164\x74\160\x73\x3a\x2f\57"; goto z3Gm9; IgBTZ: return $scheme . Config::API_HOST; goto x3YNl; gjj7Y: if (!($this->config->useHTTPS == true)) { goto esPuI; } goto bFwms; z3Gm9: esPuI: goto IgBTZ; x3YNl: } private function rsPost($path, $body = null) { $url = $this->getRsHost() . $path; return $this->post($url, $body); } private function apiGet($path) { $url = $this->getApiHost() . $path; return $this->get($url); } private function rsGet($path) { $url = $this->getRsHost() . $path; return $this->get($url); } private function get($url) { goto PQ6Fv; MBdju: ItMaR: goto Qh09S; u2ZEA: $ret = Client::get($url, $headers); goto WCGYc; PQ6Fv: $headers = $this->auth->authorization($url); goto u2ZEA; WCGYc: if ($ret->ok()) { goto ItMaR; } goto c2cRL; Qh09S: return array($ret->json(), null); goto LZ1V_; c2cRL: return array(null, new Error($url, $ret)); goto MBdju; LZ1V_: } private function post($url, $body) { goto qhapQ; Go4xO: WRn7b: goto QMhpr; QMhpr: $r = $ret->body === null ? array() : $ret->json(); goto KU58k; ybyp6: return array(null, new Error($url, $ret)); goto Go4xO; KU58k: return array($r, null); goto JfH3l; cAz3I: $ret = Client::post($url, $body, $headers); goto qrAY3; qrAY3: if ($ret->ok()) { goto WRn7b; } goto ybyp6; qhapQ: $headers = $this->auth->authorization($url, $body, "\141\x70\160\x6c\x69\x63\141\x74\151\157\156\57\x78\x2d\x77\x77\167\55\x66\157\162\155\x2d\x75\x72\154\x65\156\x63\x6f\x64\145\144"); goto cAz3I; JfH3l: } public static function buildBatchCopy($source_bucket, $key_pairs, $target_bucket, $force) { return self::twoKeyBatch("\x2f\x63\x6f\160\171", $source_bucket, $key_pairs, $target_bucket, $force); } public static function buildBatchRename($bucket, $key_pairs, $force) { return self::buildBatchMove($bucket, $key_pairs, $bucket, $force); } public static function buildBatchMove($source_bucket, $key_pairs, $target_bucket, $force) { return self::twoKeyBatch("\x2f\x6d\x6f\166\x65", $source_bucket, $key_pairs, $target_bucket, $force); } public static function buildBatchDelete($bucket, $keys) { return self::oneKeyBatch("\57\x64\145\x6c\145\x74\145", $bucket, $keys); } public static function buildBatchStat($bucket, $keys) { return self::oneKeyBatch("\x2f\x73\164\x61\164", $bucket, $keys); } public static function buildBatchDeleteAfterDays($bucket, $key_day_pairs) { goto YBgom; TiSOv: return $data; goto QUWE1; YBgom: $data = array(); goto YpopH; YpopH: foreach ($key_day_pairs as $key => $day) { array_push($data, "\x2f\x64\x65\x6c\x65\164\x65\x41\146\164\x65\x72\104\x61\x79\163\x2f" . \Qiniu\entry($bucket, $key) . "\57" . $day); NO6nc: } goto fbOVe; fbOVe: iHoDW: goto TiSOv; QUWE1: } public static function buildBatchChangeMime($bucket, $key_mime_pairs) { goto gp5MF; HWs0S: FmLgb: goto gUPqj; gUPqj: return $data; goto mxtMn; gp5MF: $data = array(); goto CNI60; CNI60: foreach ($key_mime_pairs as $key => $mime) { array_push($data, "\x2f\143\x68\x67\x6d\57" . \Qiniu\entry($bucket, $key) . "\x2f\x6d\x69\155\x65\x2f" . base64_encode($mime)); PJUop: } goto HWs0S; mxtMn: } public static function buildBatchChangeType($bucket, $key_type_pairs) { goto Ty4Aq; l9IHi: wWwJd: goto yLKOy; yLKOy: return $data; goto xvNwb; cwr8E: foreach ($key_type_pairs as $key => $type) { array_push($data, "\x2f\143\150\164\x79\x70\145\x2f" . \Qiniu\entry($bucket, $key) . "\x2f\x74\171\160\x65\57" . $type); gDqlB: } goto l9IHi; Ty4Aq: $data = array(); goto cwr8E; xvNwb: } private static function oneKeyBatch($operation, $bucket, $keys) { goto iODHt; iODHt: $data = array(); goto c31Ge; Fl7Xh: return $data; goto mtDPR; c31Ge: foreach ($keys as $key) { array_push($data, $operation . "\x2f" . \Qiniu\entry($bucket, $key)); wlhLR: } goto fWkql; fWkql: XBNv3: goto Fl7Xh; mtDPR: } private static function twoKeyBatch($operation, $source_bucket, $key_pairs, $target_bucket, $force) { goto vb9za; vb9za: if (!($target_bucket === null)) { goto hxp2u; } goto VkMhD; k5lEI: return $data; goto hT47r; uqFY1: hxp2u: goto X9pad; iYBBF: $forceOp = "\146\141\154\x73\x65"; goto q_vXG; VkMhD: $target_bucket = $source_bucket; goto uqFY1; drrAe: siOwR: goto k5lEI; q_vXG: if (!$force) { goto eJjTW; } goto DOUrA; psuEH: foreach ($key_pairs as $from_key => $to_key) { goto Sppcj; wYj5r: array_push($data, $operation . "\57" . $from . "\x2f" . $to . "\57\146\x6f\162\143\145\57" . $forceOp); goto G7Z8o; Sppcj: $from = \Qiniu\entry($source_bucket, $from_key); goto MPT8r; G7Z8o: ZxmnC: goto QL7Fw; MPT8r: $to = \Qiniu\entry($target_bucket, $to_key); goto wYj5r; QL7Fw: } goto drrAe; X9pad: $data = array(); goto iYBBF; DOUrA: $forceOp = "\164\x72\x75\x65"; goto mcnX_; mcnX_: eJjTW: goto psuEH; hT47r: } }