<?php
 namespace Qiniu\Tests; use Qiniu\Storage\BucketManager; class BucketTest extends \PHPUnit_Framework_TestCase { protected $bucketManager; protected $dummyBucketManager; protected $bucketName; protected $key; protected $key2; protected function setUp() { goto xcOt6; YGQWd: $this->key2 = $key2; goto LyOvu; ryp6d: $this->bucketManager = new BucketManager($testAuth); goto F7itN; LyOvu: global $testAuth; goto ryp6d; ZIrbx: $this->dummyBucketManager = new BucketManager($dummyAuth); goto Mz1Kd; jzUEJ: $this->key = $key; goto YGQWd; rZzxv: $this->bucketName = $bucketName; goto jzUEJ; lcIpz: global $key; goto aBWaK; aBWaK: global $key2; goto rZzxv; xcOt6: global $bucketName; goto lcIpz; F7itN: global $dummyAuth; goto ZIrbx; Mz1Kd: } public function testBuckets() { goto ewQ6p; tH7ub: list($list2, $error) = $this->dummyBucketManager->buckets(); goto creLK; HoDHM: $this->assertTrue(in_array($this->bucketName, $list)); goto hQ9Vv; hQ9Vv: $this->assertNull($error); goto tH7ub; ewQ6p: list($list, $error) = $this->bucketManager->buckets(); goto HoDHM; D7kPj: $this->assertNotNull($error->message()); goto VZ4Ww; creLK: $this->assertEquals(401, $error->code()); goto OAQQJ; OAQQJ: $this->assertNull($list2); goto D7kPj; VZ4Ww: } public function testList() { goto cOyKb; YfZXW: $this->assertNotNull($ret["\x69\x74\x65\155\163"][0]); goto S5TtY; cOyKb: list($ret, $error) = $this->bucketManager->listFiles($this->bucketName, null, null, 10); goto YfZXW; S5TtY: $this->assertNotNull($ret["\x6d\x61\162\x6b\145\x72"]); goto fVQrb; fVQrb: } public function testStat() { goto dbHsS; H7yWE: $this->assertNull($stat); goto Lz2mU; OYCaJ: list($stat, $error) = $this->bucketManager->stat($this->bucketName, "\156\157\x66\151\154\145"); goto H7yWE; b45j7: $this->assertNull($error); goto FH1dg; qXxNT: $this->assertNotNull($error->message()); goto By8mS; Lz2mU: $this->assertEquals(612, $error->code()); goto qXxNT; By8mS: list($stat, $error) = $this->bucketManager->stat("\x6e\157\x62\165\143\153\x65\x74", "\x6e\x6f\x66\151\x6c\x65"); goto W_zMH; FH1dg: $this->assertNotNull($stat["\150\141\163\150"]); goto OYCaJ; W_zMH: $this->assertNull($stat); goto v6S9a; moEVU: $this->assertNotNull($stat); goto b45j7; Pz7Ec: $this->assertNotNull($error->message()); goto n1PDy; v6S9a: $this->assertEquals(631, $error->code()); goto Pz7Ec; dbHsS: list($stat, $error) = $this->bucketManager->stat($this->bucketName, $this->key); goto moEVU; n1PDy: } public function testDelete() { $error = $this->bucketManager->delete($this->bucketName, "\144\x65\x6c"); $this->assertEquals(612, $error->code()); } public function testRename() { goto x1c1s; EKabm: $key2 = "\x72\145\156\141\155\145\x74\157" . $key; goto grt8j; aEdjx: $error = $this->bucketManager->delete($this->bucketName, $key2); goto L4WdK; grt8j: $error = $this->bucketManager->rename($this->bucketName, $key, $key2); goto grehM; L4WdK: $this->assertNull($error); goto a0z3e; AD8qj: $this->bucketManager->copy($this->bucketName, $this->key, $this->bucketName, $key); goto EKabm; x1c1s: $key = "\x72\145\x6e\141\155\x65\146\x72\157\x6d" . rand(); goto AD8qj; grehM: $this->assertNull($error); goto aEdjx; a0z3e: } public function testCopy() { goto fioNj; zqViZ: $this->assertNull($error); goto lZ34F; T_MFT: $this->assertNull($error); goto liMd7; sHJEo: $this->assertNull($error); goto toIfn; LbnIF: $this->assertEquals($key2Stat["\150\141\163\150"], $key2CopiedStat["\150\141\x73\150"]); goto zFF9y; liMd7: list($key2Stat, ) = $this->bucketManager->stat($this->bucketName, $this->key2); goto WlcIR; g8PyW: $error = $this->bucketManager->copy($this->bucketName, $this->key, $this->bucketName, $key); goto sHJEo; zFF9y: $error = $this->bucketManager->delete($this->bucketName, $key); goto zqViZ; fioNj: $key = "\x63\157\x70\x79\164\x6f" . rand(); goto LBj_h; LBj_h: $this->bucketManager->delete($this->bucketName, $key); goto g8PyW; WlcIR: list($key2CopiedStat, ) = $this->bucketManager->stat($this->bucketName, $key); goto LbnIF; toIfn: $error = $this->bucketManager->copy($this->bucketName, $this->key2, $this->bucketName, $key, true); goto T_MFT; lZ34F: } public function testChangeMime() { $error = $this->bucketManager->changeMime($this->bucketName, "\160\150\x70\55\x73\144\x6b\56\150\164\155\154", "\x74\x65\170\x74\57\150\x74\155\154"); $this->assertNull($error); } public function testPrefetch() { $error = $this->bucketManager->prefetch($this->bucketName, "\x70\150\160\x2d\x73\144\153\56\150\164\155\x6c"); $this->assertNull($error); } public function testFetch() { goto C0yzW; C0yzW: list($ret, $error) = $this->bucketManager->fetch("\150\164\164\160\72\57\x2f\x64\x65\x76\x65\154\x6f\160\145\x72\x2e\x71\151\x6e\151\x75\56\x63\x6f\155\57\x64\157\143\x73\x2f\x76\66\x2f\x73\144\153\57\160\x68\160\55\x73\x64\153\56\150\x74\155\x6c", $this->bucketName, "\146\145\x74\143\x68\x2e\150\x74\155\154"); goto tMldI; Mvu2y: list($ret, $error) = $this->bucketManager->fetch("\x68\x74\x74\x70\x3a\x2f\57\x64\x65\166\x65\x6c\157\x70\145\162\56\161\151\156\x69\x75\56\143\x6f\x6d\x2f\144\x6f\143\x73\x2f\x76\66\57\x73\x64\x6b\57\160\x68\x70\x2d\x73\144\153\x2e\x68\164\155\154", $this->bucketName); goto w1pEq; n6e9b: $this->assertNull($error); goto Qxbx0; nXyVb: $this->assertNull($error); goto Mvu2y; b51j8: $this->assertArrayHasKey("\153\x65\171", $ret); goto nXyVb; Qxbx0: list($ret, $error) = $this->bucketManager->fetch("\x68\164\x74\x70\72\57\57\x64\x65\x76\145\154\x6f\160\x65\x72\x2e\161\151\x6e\x69\x75\56\x63\x6f\x6d\x2f\144\157\x63\163\57\166\66\x2f\163\x64\153\x2f\x70\x68\x70\55\x73\144\x6b\56\150\x74\x6d\x6c", $this->bucketName, ''); goto b51j8; w1pEq: $this->assertArrayHasKey("\153\x65\x79", $ret); goto xagaN; tMldI: $this->assertArrayHasKey("\x68\x61\x73\150", $ret); goto n6e9b; xagaN: $this->assertNull($error); goto jYOsp; jYOsp: } public function testBatchCopy() { goto AyGyO; M8WJb: list($ret, $error) = $this->bucketManager->batch($ops); goto i7GIH; iES1_: list($ret, $error) = $this->bucketManager->batch($ops); goto O5cmR; O5cmR: $this->assertEquals(200, $ret[0]["\143\157\144\145"]); goto db80l; AyGyO: $key = "\x63\157\160\171\x74\157" . rand(); goto A0mk_; i7GIH: $this->assertEquals(200, $ret[0]["\143\157\x64\x65"]); goto T928r; T928r: $ops = BucketManager::buildBatchDelete($this->bucketName, array($key)); goto iES1_; A0mk_: $ops = BucketManager::buildBatchCopy($this->bucketName, array($this->key => $key), $this->bucketName, true); goto M8WJb; db80l: } public function testBatchMove() { goto whHjK; whHjK: $key = "\x6d\x6f\x76\145\146\162\x6f\x6d" . rand(); goto qxSNV; uMqEs: $key2 = $key . "\164\157"; goto PGwlB; El2zU: $this->assertEquals(200, $ret[0]["\143\157\144\145"]); goto BCsp2; gQoGo: $this->assertNull($error); goto EXIRP; BCsp2: $error = $this->bucketManager->delete($this->bucketName, $key2); goto gQoGo; PGwlB: $ops = BucketManager::buildBatchMove($this->bucketName, array($key => $key2), $this->bucketName, true); goto StSeZ; StSeZ: list($ret, $error) = $this->bucketManager->batch($ops); goto El2zU; qxSNV: $this->bucketManager->copy($this->bucketName, $this->key, $this->bucketName, $key); goto uMqEs; EXIRP: } public function testBatchRename() { goto coovE; coovE: $key = "\x72\x65\x6e\x61\x6d\145" . rand(); goto e9j9V; V2FvH: list($ret, $error) = $this->bucketManager->batch($ops); goto ydixv; ZKBGz: $this->assertNull($error); goto d3fhn; ydixv: $this->assertEquals(200, $ret[0]["\x63\x6f\144\x65"]); goto zj2vd; PxnCj: $ops = BucketManager::buildBatchRename($this->bucketName, array($key => $key2), true); goto V2FvH; e9j9V: $this->bucketManager->copy($this->bucketName, $this->key, $this->bucketName, $key); goto rWYCt; zj2vd: $error = $this->bucketManager->delete($this->bucketName, $key2); goto ZKBGz; rWYCt: $key2 = $key . "\x74\x6f"; goto PxnCj; d3fhn: } public function testBatchStat() { goto Deo2U; Kl_qS: list($ret, $error) = $this->bucketManager->batch($ops); goto dVcFE; dVcFE: $this->assertEquals(200, $ret[0]["\x63\x6f\144\145"]); goto yZeo3; Deo2U: $ops = BucketManager::buildBatchStat($this->bucketName, array("\160\150\x70\x2d\163\144\153\56\150\x74\155\154")); goto Kl_qS; yZeo3: } public function testDeleteAfterDays() { goto bWIP_; I1qed: $err = $this->bucketManager->deleteAfterDays($this->bucketName, $key, 1); goto tdS4M; llw3b: $this->bucketManager->copy($this->bucketName, $this->key, $this->bucketName, $key); goto I1qed; O8rhc: $err = $this->bucketManager->deleteAfterDays($this->bucketName, $key, 1); goto ozwl_; tdS4M: $this->assertEquals(null, $err); goto KRGhW; ozwl_: $this->assertEquals(612, $err->code()); goto llw3b; bWIP_: $key = rand(); goto O8rhc; KRGhW: } }