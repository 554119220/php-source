<?php
 namespace Qiniu\Tests; use Qiniu\Processing\Operation; use Qiniu\Processing\PersistentFop; class PfopTest extends \PHPUnit_Framework_TestCase { public function testPfop() { goto EC5An; Y8xl2: list($id, $error) = $pfop->execute($bucket, $key, $fops); goto vlfMp; vlfMp: $this->assertNull($error); goto ea17C; ea17C: list($status, $error) = $pfop->status($id); goto FsdcI; lDUE7: $this->assertNull($error); goto vfhA0; FsdcI: $this->assertNotNull($status); goto lDUE7; EC5An: global $testAuth; goto UIl7_; zEoa9: $fops = "\141\166\x74\150\x75\x6d\x62\57\155\x33\165\x38\57\x73\x65\147\x74\151\155\x65\57\x31\x30\x2f\x76\x63\157\x64\145\143\x2f\x6c\x69\x62\x78\62\x36\x34\x2f\163\57\x33\62\60\170\62\x34\x30"; goto Y8xl2; l0kkz: $key = "\x73\x69\x6e\x74\x65\154\137\x74\x72\141\151\x6c\145\162\x2e\x6d\160\64"; goto hZ3HW; hZ3HW: $pfop = new PersistentFop($testAuth, null); goto zEoa9; UIl7_: $bucket = "\164\x65\163\164\162\145\163"; goto l0kkz; vfhA0: } public function testPfops() { goto c_wh0; bt4nf: $this->assertNull($error); goto XtjpH; KNCt1: $this->assertNotNull($status); goto bI2ob; wM0GX: $bucket = "\164\x65\x73\x74\x72\x65\163"; goto UvEL0; c_wh0: global $testAuth; goto wM0GX; bI2ob: $this->assertNull($error); goto HI3Ao; XtjpH: list($status, $error) = $pfop->status($id); goto KNCt1; UvEL0: $key = "\163\151\x6e\x74\145\154\x5f\x74\162\x61\x69\x6c\x65\x72\x2e\155\x70\64"; goto EWlfK; ZiQhX: list($id, $error) = $pfop->execute($bucket, $key, $fops); goto bt4nf; QNt_M: $pfop = new PersistentFop($testAuth, null); goto ZiQhX; EWlfK: $fops = array("\141\166\x74\150\165\155\142\57\155\63\x75\70\x2f\x73\145\x67\x74\151\x6d\145\x2f\x31\x30\57\x76\143\157\144\145\143\57\154\x69\x62\170\62\x36\x34\57\163\57\63\62\x30\170\62\x34\x30", "\x76\x66\162\x61\155\x65\x2f\152\160\x67\x2f\x6f\x66\146\163\145\x74\x2f\x37\x2f\x77\x2f\64\70\x30\57\150\57\63\x36\x30"); goto QNt_M; HI3Ao: } public function testMkzip() { goto VmQ5r; cp0bu: $this->assertNotNull($status); goto aEN5h; VmQ5r: global $testAuth; goto fASeW; wfumw: list($status, $error) = $pfop->status($id); goto cp0bu; dJbDw: $fops .= "\57\x75\162\x6c\x2f" . \Qiniu\base64_urlSafeEncode($url2); goto UhbWc; aEN5h: $this->assertNull($error); goto VtvAV; j5gS2: $key = "\x70\x68\160\55\154\x6f\147\x6f\56\160\x6e\x67"; goto Phhzz; D2Q2A: $zipKey = "\164\145\x73\x74\x2e\172\x69\x70"; goto g4lOR; IYueN: list($id, $error) = $pfop->execute($bucket, $key, $fops); goto WaOP6; wVHgg: $url1 = "\x68\164\x74\x70\72\57\x2f\x70\150\160\x73\x64\x6b\56\x71\x69\156\151\x75\x64\x6e\56\143\x6f\x6d\x2f\x70\x68\x70\55\154\157\147\157\x2e\x70\156\x67"; goto WMClH; fASeW: $bucket = "\x70\x68\160\163\144\153"; goto j5gS2; WaOP6: $this->assertNull($error); goto wfumw; WMClH: $url2 = "\x68\x74\x74\x70\72\57\57\160\x68\160\x73\144\x6b\56\x71\x69\156\151\x75\144\x6e\x2e\143\157\x6d\57\160\x68\x70\55\x73\144\153\x2e\x68\164\155\154"; goto D2Q2A; UhbWc: $fops .= "\174\163\141\x76\x65\141\163\x2f" . \Qiniu\base64_urlSafeEncode("{$bucket}\x3a{$zipKey}"); goto IYueN; g4lOR: $fops = "\155\153\x7a\x69\160\x2f\62\x2f\x75\162\154\57" . \Qiniu\base64_urlSafeEncode($url1); goto dJbDw; Phhzz: $pfop = new PersistentFop($testAuth, null); goto wVHgg; VtvAV: } }