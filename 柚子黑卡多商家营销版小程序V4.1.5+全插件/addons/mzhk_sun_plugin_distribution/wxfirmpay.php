<?php
 class WeixinfirmPay { protected $mch_appid; protected $mchid; protected $key; protected $openid; protected $partner_trade_no; protected $re_user_name; protected $desc; protected $amount; protected $apiclient_cert; protected $apiclient_key; function __construct($mch_appid, $mchid, $key, $openid, $partner_trade_no, $re_user_name, $desc, $amount, $apiclient_cert, $apiclient_key) { goto QjUyy; MmFXb: $this->key = $key; goto d55Tk; AAm2z: $this->re_user_name = $re_user_name; goto CNz2Q; CNz2Q: $this->desc = $desc; goto cfqG7; BWQzp: $this->apiclient_key = $apiclient_key; goto ncLhZ; twKKT: $this->apiclient_cert = $apiclient_cert; goto BWQzp; QjUyy: $this->mch_appid = $mch_appid; goto lABNr; B4Zgt: $this->partner_trade_no = $partner_trade_no; goto AAm2z; cfqG7: $this->amount = $amount; goto twKKT; d55Tk: $this->openid = $openid; goto B4Zgt; lABNr: $this->mchid = $mchid; goto MmFXb; ncLhZ: } public function pay() { $return = $this->unifiedorder(); return $return; } private function unifiedorder() { goto o_vJF; o_vJF: $url = "\150\164\164\x70\x73\x3a\x2f\x2f\141\x70\x69\56\x6d\143\150\56\167\145\x69\x78\151\156\56\x71\161\x2e\143\157\x6d\57\x6d\155\x70\x61\171\x6d\x6b\164\x74\162\x61\x6e\163\x66\x65\162\x73\57\160\x72\x6f\x6d\x6f\x74\x69\157\156\57\164\162\x61\x6e\163\x66\x65\x72\x73"; goto Y_DQV; VnaSw: $xmlData = $this->arrayToXml($parameters); goto LmflD; W42DN: return $return; goto ua8bn; Y_DQV: $parameters = array("\x6d\143\150\x5f\x61\160\x70\151\x64" => $this->mch_appid, "\155\x63\x68\x69\144" => $this->mchid, "\156\157\x6e\x63\x65\137\163\x74\x72" => $this->createNoncestr(), "\x70\x61\x72\164\156\x65\162\x5f\164\162\141\x64\x65\137\156\157" => $this->partner_trade_no, "\x6f\x70\145\156\x69\x64" => $this->openid, "\143\150\x65\x63\153\x5f\x6e\141\155\x65" => "\x4e\117\137\103\110\x45\x43\x4b", "\162\x65\137\165\163\145\162\x5f\x6e\x61\155\145" => $this->re_user_name, "\141\x6d\x6f\165\156\164" => $this->amount, "\x64\145\x73\x63" => $this->desc, "\163\x70\142\x69\154\x6c\137\143\x72\x65\x61\164\145\x5f\x69\160" => "\x31\x32\60\56\x37\x39\x2e\61\x35\62\x2e\61\x30\x35"); goto hwOvX; hwOvX: $parameters["\163\151\x67\156"] = $this->getSign($parameters); goto VnaSw; LmflD: $return = $this->xmlToArray($this->postXmlCurl($xmlData, $url, 60, $this->apiclient_cert, $this->apiclient_key)); goto W42DN; ua8bn: } private static function postXmlCurl($xml, $url, $second = 30, $apiclient_cert, $apiclient_key) { goto OfhI4; Ol1mN: curl_setopt($ch, CURLOPT_HEADER, FALSE); goto ffuJR; BNFvU: kcVFA: goto ixaB9; tOO2Z: curl_close($ch); goto oqi_r; rcA4M: curl_setopt($ch, CURLOPT_URL, $url); goto LXWNG; ieZsE: curl_setopt($ch, CURLOPT_POSTFIELDS, $xml); goto NAhlm; oqi_r: return $data; goto BNFvU; cJHup: throw new WxPayException("\x63\165\162\x6c\345\x87\xba\xe9\x94\231\357\274\214\xe9\224\x99\xe8\xaf\xaf\347\xa0\x81\x3a{$error}"); goto SwhTs; IYFQc: curl_setopt($ch, CURLOPT_TIMEOUT, $second); goto rcA4M; Wfzt5: $error = curl_errno($ch); goto SQDc3; he0NO: set_time_limit(0); goto NlK_K; NlK_K: $data = curl_exec($ch); goto AWRqj; NAhlm: curl_setopt($ch, CURLOPT_CONNECTTIMEOUT, 20); goto EirMY; RaupI: yY3nu: goto tOO2Z; EirMY: curl_setopt($ch, CURLOPT_SSLCERT, $apiclient_cert); goto sRXUN; kHsOa: curl_setopt($ch, CURLOPT_POST, TRUE); goto ieZsE; sRXUN: curl_setopt($ch, CURLOPT_SSLKEY, $apiclient_key); goto hMPL0; SQDc3: curl_close($ch); goto cJHup; hMPL0: curl_setopt($ch, CURLOPT_TIMEOUT, 40); goto he0NO; SwhTs: goto kcVFA; goto RaupI; I3DOm: curl_setopt($ch, CURLOPT_SSL_VERIFYHOST, FALSE); goto Ol1mN; ffuJR: curl_setopt($ch, CURLOPT_RETURNTRANSFER, TRUE); goto kHsOa; LXWNG: curl_setopt($ch, CURLOPT_SSL_VERIFYPEER, FALSE); goto I3DOm; AWRqj: if ($data) { goto yY3nu; } goto Wfzt5; OfhI4: $ch = curl_init(); goto IYFQc; ixaB9: } private function arrayToXml($arr) { goto w_BFU; kJ2Qu: foreach ($arr as $key => $val) { goto qz0_j; q_MX8: goto comgZ; goto ObtOo; o3V62: $xml .= "\x3c" . $key . "\76" . arrayToXml($val) . "\x3c\57" . $key . "\76"; goto Igc0b; dlctw: V3Jvu: goto lf_fB; JfwqQ: $xml .= "\x3c" . $key . "\76" . $val . "\x3c\x2f" . $key . "\76"; goto q_MX8; Igc0b: comgZ: goto dlctw; qz0_j: if (is_array($val)) { goto kmCUO; } goto JfwqQ; ObtOo: kmCUO: goto o3V62; lf_fB: } goto NBI3g; UkG56: $xml .= "\74\x2f\162\157\x6f\164\x3e"; goto P0AAw; NBI3g: mU9Mq: goto UkG56; P0AAw: return $xml; goto zisBB; w_BFU: $xml = "\x3c\162\157\157\164\76"; goto kJ2Qu; zisBB: } private function xmlToArray($xml) { goto XjrWe; J5CuR: return $val; goto CqG6K; XjrWe: libxml_disable_entity_loader(true); goto AOeTk; AOeTk: $xmlstring = simplexml_load_string($xml, "\123\151\x6d\x70\154\145\130\x4d\x4c\x45\x6c\x65\x6d\145\156\x74", LIBXML_NOCDATA); goto mTWUj; mTWUj: $val = json_decode(json_encode($xmlstring), true); goto J5CuR; CqG6K: } private function createNoncestr($length = 32) { goto fl9Sg; FIVwm: goto JawrA; goto d8Y4G; c1S23: $i = 0; goto Tufa1; Tufa1: JawrA: goto qyxcW; PAE2F: $i++; goto FIVwm; ifpiL: return $str; goto EY_Pf; qyxcW: if (!($i < $length)) { goto sPHi2; } goto lSoin; d8Y4G: sPHi2: goto ifpiL; nVkOs: oBwEQ: goto PAE2F; fl9Sg: $chars = "\141\142\x63\144\145\x66\147\x68\x69\152\153\154\155\x6e\x6f\x70\161\x72\x73\164\x75\166\x77\x78\171\172\60\61\62\x33\64\65\x36\67\x38\x39"; goto luDMR; luDMR: $str = ''; goto c1S23; lSoin: $str .= substr($chars, mt_rand(0, strlen($chars) - 1), 1); goto nVkOs; EY_Pf: } private function getSign($Obj) { goto CvLI2; UywAj: $String = $String . "\x26\153\145\171\x3d" . $this->key; goto uhF0Q; fCKg3: $String = $this->formatBizQueryParaMap($Parameters, false); goto UywAj; uhF0Q: $String = md5($String); goto bILkR; bILkR: $result_ = strtoupper($String); goto un1it; JLz_e: gHyAf: goto GJ4ej; un1it: return $result_; goto hKzj2; CvLI2: foreach ($Obj as $k => $v) { $Parameters[$k] = $v; MYsPI: } goto JLz_e; GJ4ej: ksort($Parameters); goto fCKg3; hKzj2: } private function formatBizQueryParaMap($paraMap, $urlencode) { goto Z6cgJ; mDaAd: $reqPar; goto omKOK; pQLE7: ksort($paraMap); goto RrPEr; omKOK: if (!(strlen($buff) > 0)) { goto qxOzJ; } goto xMFwB; xMFwB: $reqPar = substr($buff, 0, strlen($buff) - 1); goto ic9yu; ic9yu: qxOzJ: goto c4qXb; Z6cgJ: $buff = ''; goto pQLE7; c4qXb: return $reqPar; goto VNJ80; zsM7h: FJ4Za: goto mDaAd; RrPEr: foreach ($paraMap as $k => $v) { goto BYYzd; ndPnH: $buff .= $k . "\x3d" . $v . "\46"; goto r0Vg2; pNiLR: $v = urlencode($v); goto br1Fw; BYYzd: if (!$urlencode) { goto dFeLu; } goto pNiLR; r0Vg2: MPPPR: goto hzxsV; br1Fw: dFeLu: goto ndPnH; hzxsV: } goto zsM7h; VNJ80: } }