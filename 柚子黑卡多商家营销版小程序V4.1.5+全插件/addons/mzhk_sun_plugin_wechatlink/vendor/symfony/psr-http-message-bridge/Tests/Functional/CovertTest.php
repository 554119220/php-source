<?php
 namespace Symfony\Bridge\PsrHttpMessage\Tests\Functional; use Nyholm\Psr7\Factory\Psr17Factory; use Nyholm\Psr7\Response as Psr7Response; use Nyholm\Psr7\ServerRequest as Psr7Request; use Nyholm\Psr7\Stream as Psr7Stream; use PHPUnit\Framework\TestCase; use Psr\Http\Message\ResponseInterface; use Psr\Http\Message\ServerRequestInterface; use Symfony\Bridge\PsrHttpMessage\Factory\HttpFoundationFactory; use Symfony\Bridge\PsrHttpMessage\Factory\PsrHttpFactory; use Symfony\Bridge\PsrHttpMessage\HttpFoundationFactoryInterface; use Symfony\Bridge\PsrHttpMessage\HttpMessageFactoryInterface; use Symfony\Component\HttpFoundation\Cookie; use Symfony\Component\HttpFoundation\File\UploadedFile; use Symfony\Component\HttpFoundation\Request; use Symfony\Component\HttpFoundation\Response; class CovertTest extends TestCase { private $tmpDir; public function setup() { goto bZEF_; PF1dn: $this->markTestSkipped("\156\171\x68\157\154\x6d\57\160\x73\x72\67\40\x69\x73\x20\156\157\x74\40\x69\x6e\x73\x74\x61\154\x6c\x65\144\56"); goto y8og2; y8og2: m6hHX: goto vovIS; bZEF_: if (class_exists("\x4e\171\x68\x6f\x6c\155\134\x50\163\162\x37\134\x53\x65\x72\166\x65\162\x52\x65\161\165\145\x73\x74")) { goto m6hHX; } goto PF1dn; vovIS: $this->tmpDir = sys_get_temp_dir(); goto jFPtA; jFPtA: } public function testConvertRequestMultipleTimes($request, $firstFactory, $secondFactory) { goto BYzMF; b9ytv: $this->assertEquals($request->getPassword(), $finalRequest->getPassword()); goto TJ0dw; jTKGz: $this->assertEquals($request->getHttpHost(), $finalRequest->getHttpHost()); goto u4uRD; JVgNs: $this->assertEquals($strToLower($request->getHeaders()), $strToLower($finalRequest->getHeaders())); goto gPh3u; u4uRD: $this->assertEquals($request->getMethod(), $finalRequest->getMethod()); goto b9ytv; gPh3u: $this->assertEquals($request->getProtocolVersion(), $finalRequest->getProtocolVersion()); goto s01mp; BORML: goto SuTAZ; goto wioGh; BYzMF: $temporaryRequest = $firstFactory->createRequest($request); goto c6EV1; IEWkW: if ($finalRequest instanceof Request) { goto nk2Tl; } goto jyhwf; wioGh: MMPZb: goto v40wu; lz4FC: $this->assertEquals((string) $request->getUri(), (string) $finalRequest->getUri()); goto cCpwl; WKMst: $this->assertEquals($request->getQueryString(), $finalRequest->getQueryString()); goto lulMC; xNnJO: $this->assertEquals($request->getScheme(), $finalRequest->getScheme()); goto asU52; qhpGJ: $this->assertEquals($request->getPort(), $finalRequest->getPort()); goto Y9kak; PaVoq: $this->assertEquals($request->getUser(), $finalRequest->getUser()); goto adGBN; D02Hv: $this->assertEquals($request->getCookieParams(), $finalRequest->getCookieParams()); goto Wv6KI; PYek4: $this->fail("\44\x66\151\x6e\x61\154\x52\x65\161\165\x65\163\164\40\155\x75\163\x74\40\x62\145\x20\x61\156\x20\151\x6e\163\x74\x61\x6e\x63\x65\40\x6f\146\x20\120\123\122\67\x20\157\162\40\x61\x20\110\124\x54\120\106\157\165\x6e\x64\141\164\151\157\156\40\162\145\x71\x75\x65\163\164"); goto mCJgu; R4NTQ: $this->assertEquals($request->getBasePath(), $finalRequest->getBasePath()); goto qWPQA; v40wu: $strToLower = function ($arr) { foreach ($arr as $key => $value) { (yield strtolower($key) => $value); Zw1RF: } BS8zM: }; goto QuQHJ; adGBN: $this->assertEquals($request->getUserInfo(), $finalRequest->getUserInfo()); goto BORML; c6EV1: $finalRequest = $secondFactory->createRequest($temporaryRequest); goto IEWkW; jbTtM: $this->assertEquals($request->getHost(), $finalRequest->getHost()); goto jTKGz; SwAYT: $this->assertEquals($request->getMethod(), $finalRequest->getMethod()); goto XQy4j; Y9kak: $this->assertEquals($request->getProtocolVersion(), $finalRequest->getProtocolVersion()); goto WKMst; asU52: $this->assertEquals($request->getSchemeAndHttpHost(), $finalRequest->getSchemeAndHttpHost()); goto wfOta; JHEaV: $this->assertEquals($request->getUploadedFiles(), $finalRequest->getUploadedFiles()); goto SwAYT; Uy6UC: nk2Tl: goto R4NTQ; qWPQA: $this->assertEquals($request->getBaseUrl(), $finalRequest->getBaseUrl()); goto KFSUO; cCpwl: $this->assertEquals((string) $request->getBody(), (string) $finalRequest->getBody()); goto JVgNs; Wv6KI: $this->assertEquals((array) $request->getParsedBody(), (array) $finalRequest->getParsedBody()); goto nsFsn; eL7cN: $this->assertEquals($request->getEncodings(), $finalRequest->getEncodings()); goto TBiRu; vzqeC: $this->assertEquals($request->getUri(), $finalRequest->getUri()); goto PaVoq; jyhwf: if ($finalRequest instanceof ServerRequestInterface) { goto MMPZb; } goto PYek4; QuQHJ: $this->assertEquals($request->getAttributes(), $finalRequest->getAttributes()); goto D02Hv; s01mp: SuTAZ: goto PlC_9; XQy4j: $this->assertEquals($request->getRequestTarget(), $finalRequest->getRequestTarget()); goto lz4FC; TBiRu: $this->assertEquals($request->getETags(), $finalRequest->getETags()); goto jbTtM; mCJgu: goto SuTAZ; goto Uy6UC; wfOta: $this->assertEquals($request->getScriptName(), $finalRequest->getScriptName()); goto vzqeC; KFSUO: $this->assertEquals($request->getContent(), $finalRequest->getContent()); goto eL7cN; TJ0dw: $this->assertEquals($request->getPathInfo(), $finalRequest->getPathInfo()); goto qhpGJ; nsFsn: $this->assertEquals($request->getQueryParams(), $finalRequest->getQueryParams()); goto JHEaV; lulMC: $this->assertEquals($request->getRequestUri(), $finalRequest->getRequestUri()); goto xNnJO; PlC_9: } public function requestProvider() { goto Wip3F; ztemz: return [[$sfRequest, $psr17Factory, $symfonyFactory], [$psr7Request, $symfonyFactory, $psr17Factory]]; goto KhvwL; S55rs: $psr7Request = (new Psr7Request("\120\x4f\x53\124", "\x68\x74\x74\160\72\57\57\164\x6e\x79\150\x6f\154\155\x2e\163\x65\57\146\x6f\x6f\x2f\77\x62\141\162\x3d\142\x69\x7a"))->withQueryParams(["\x62\141\162" => "\142\x69\x7a"]); goto VJzOp; OxumB: $symfonyFactory = new HttpFoundationFactory(); goto ztemz; P2lKE: $psr17Factory = new PsrHttpFactory($nyholmFactory, $nyholmFactory, $nyholmFactory, $nyholmFactory); goto OxumB; Wip3F: $sfRequest = new Request(["\x66\157\157" => "\61", "\x62\x61\x72" => ["\x62\141\x7a" => "\x34\x32"]], ["\164\x77\x69\x74\164\145\x72" => ["\x40\144\165\x6e\147\x6c\x61\163" => "\113\xc3\251\166\x69\156\x20\x44\x75\156\x67\x6c\141\x73", "\100\143\157\157\x70\x54\x69\154\154\x65\165\x6c\163" => "\114\x65\163\55\x54\151\154\x6c\145\x75\x6c\x73\56\143\x6f\157\160"], "\142\141\x7a" => "\62"], ["\141\62" => ["\x66\157\157" => "\142\141\162"]], ["\x63\61" => "\146\157\157", "\x63\62" => ["\x63\x33" => "\x62\x61\162"]], ["\x66\x31" => $this->createUploadedFile("\106\x31", "\x66\x31\56\x74\170\164", "\164\145\170\164\57\160\x6c\141\151\x6e", UPLOAD_ERR_OK), "\146\157\157" => ["\x66\62" => $this->createUploadedFile("\x46\62", "\146\x32\x2e\x74\x78\164", "\164\x65\170\164\x2f\x70\x6c\141\151\156", UPLOAD_ERR_OK)]], ["\x52\105\121\x55\105\x53\124\137\x4d\x45\x54\110\117\104" => "\x50\x4f\123\x54", "\110\124\124\120\x5f\x48\x4f\x53\124" => "\x64\165\156\147\x6c\x61\163\x2e\146\x72", "\x53\x45\x52\126\x45\122\x5f\116\101\x4d\x45" => "\x64\x75\x6e\147\x6c\x61\x73\x2e\146\x72", "\x53\x45\122\126\105\122\x5f\x50\x4f\x52\x54" => null, "\x48\x54\124\120\137\x58\x5f\x53\x59\115\106\117\x4e\x59" => "\x32\56\70", "\x52\x45\x51\x55\x45\123\x54\x5f\x55\x52\111" => "\57\x74\x65\163\x74\103\162\145\x61\x74\x65\122\145\161\165\x65\163\164\x3f\142\x61\162\x5b\142\141\x7a\135\75\64\62\46\x66\x6f\157\75\x31", "\x51\125\105\122\131\x5f\123\x54\x52\111\x4e\x47" => "\x66\x6f\157\75\61\46\x62\141\162\133\x62\141\172\135\75\64\62"], "\103\x6f\x6e\164\145\156\164"); goto S55rs; VJzOp: $nyholmFactory = new Psr17Factory(); goto P2lKE; KhvwL: } public function testConvertResponseMultipleTimes($response, $firstFactory, $secondFactory) { goto V35dk; j9OZv: $this->assertEquals($response->getProtocolVersion(), $finalResponse->getProtocolVersion()); goto dUSwA; zeENJ: $this->assertEquals($response->getAge(), $finalResponse->getAge()); goto JVKOG; XdsCQ: $this->assertEquals($response->getProtocolVersion(), $finalResponse->getProtocolVersion()); goto SMdOk; Xcjl8: $this->assertEquals($response->getContent(), $finalResponse->getContent()); goto ROLNW; SMdOk: $this->assertEquals($response->getStatusCode(), $finalResponse->getStatusCode()); goto Zte4V; yQIdo: $this->assertEquals($response->getExpires(), $finalResponse->getExpires()); goto GAYrJ; Kj3le: $this->assertEquals((string) $response->getBody(), (string) $finalResponse->getBody()); goto ZH9rJ; ROLNW: $this->assertEquals($response->getDate(), $finalResponse->getDate()); goto WNSmY; ajs7e: $this->assertEquals($response->getMaxAge(), $finalResponse->getMaxAge()); goto XdsCQ; vupDn: $this->fail("\44\x66\151\x6e\141\x6c\x52\x65\x73\x70\157\156\x73\145\40\155\165\163\x74\x20\x62\145\40\141\156\40\x69\x6e\x73\x74\141\156\143\x65\40\x6f\x66\40\120\123\122\x37\40\157\x72\40\x61\40\110\124\124\120\x46\x6f\x75\156\144\141\164\x69\x6f\x6e\x20\162\145\x73\160\157\x6e\x73\145"); goto NH7Gb; YvMJS: $strToLower = function ($arr) { foreach ($arr as $key => $value) { (yield strtolower($key) => $value); iZ5uV: } N_e8Q: }; goto iXbh0; Fm3DZ: $finalResponse = $secondFactory->createResponse($temporaryResponse); goto vzOC9; JVKOG: $this->assertEquals($response->getCharset(), $finalResponse->getCharset()); goto Xcjl8; Bwuiq: if ($finalResponse instanceof ResponseInterface) { goto OBdVS; } goto vupDn; vzOC9: if ($finalResponse instanceof Response) { goto CtQVS; } goto Bwuiq; PaFmS: goto TGYIM; goto BCCfq; V35dk: $temporaryResponse = $firstFactory->createResponse($response); goto Fm3DZ; Zte4V: $this->assertEquals($response->getTtl(), $finalResponse->getTtl()); goto PaFmS; PC3op: CtQVS: goto zeENJ; NH7Gb: goto TGYIM; goto PC3op; GAYrJ: $this->assertEquals($response->getLastModified(), $finalResponse->getLastModified()); goto ajs7e; WNSmY: $this->assertEquals($response->getEtag(), $finalResponse->getEtag()); goto yQIdo; iXbh0: $this->assertEquals($response->getStatusCode(), $finalResponse->getStatusCode()); goto MZh35; ZH9rJ: $this->assertEquals($strToLower($response->getHeaders()), $strToLower($finalResponse->getHeaders())); goto j9OZv; dUSwA: TGYIM: goto Y0YDt; BCCfq: OBdVS: goto YvMJS; MZh35: $this->assertEquals($response->getReasonPhrase(), $finalResponse->getReasonPhrase()); goto Kj3le; Y0YDt: } public function responseProvider() { goto ztYXp; bq9BE: $status = 302; goto r9kTM; ztYXp: $sfResponse = new Response("\122\145\x73\x70\x6f\156\x73\145\x20\143\x6f\x6e\x74\145\x6e\x74\56", 202, ["\x78\x2d\x73\x79\155\x66\157\x6e\x79" => ["\63\56\64"]]); goto Sr7hW; r9kTM: $headers = ["\154\x6f\143\x61\x74\x69\157\156" => ["\150\x74\164\x70\72\57\x2f\145\x78\141\x6d\x70\154\x65\x2e\143\x6f\x6d\x2f"]]; goto fIS2N; tab9K: $cookie = Cookie::create("\143\151\x74\x79", "\x4c\151\154\x6c\145", new \DateTime("\127\x65\144\x2c\x20\61\63\x20\x4a\141\156\40\x32\60\x32\x31\x20\62\62\x3a\x32\63\72\x30\61\40\x47\x4d\124")); goto axLpq; bq0ub: $symfonyFactory = new HttpFoundationFactory(); goto SICfy; hF5bq: $body = Psr7Stream::create(); goto bq9BE; fIS2N: $zendResponse = new Psr7Response($status, $headers, $body); goto BLg3p; td8DV: $sfResponse->headers->setCookie($cookie); goto hF5bq; HiWiI: goto Dde4j; goto aocwH; aocwH: Fy5Yn: goto tab9K; SICfy: return [[$sfResponse, $psr17Factory, $symfonyFactory], [$zendResponse, $symfonyFactory, $psr17Factory]]; goto pD2Tx; BLg3p: $nyholmFactory = new Psr17Factory(); goto DKasX; VW0tV: $cookie = new Cookie("\x63\151\x74\171", "\x4c\151\154\x6c\x65", new \DateTime("\127\x65\144\x2c\40\61\63\x20\112\141\x6e\40\x32\60\x32\61\x20\62\62\x3a\62\63\72\60\x31\x20\x47\115\x54")); goto HiWiI; Sr7hW: if (method_exists(Cookie::class, "\x63\x72\145\141\x74\145")) { goto Fy5Yn; } goto VW0tV; DKasX: $psr17Factory = new PsrHttpFactory($nyholmFactory, $nyholmFactory, $nyholmFactory, $nyholmFactory); goto bq0ub; axLpq: Dde4j: goto td8DV; pD2Tx: } private function createUploadedFile($content, $originalName, $mimeType, $error) { goto MUkBP; X44jI: return new UploadedFile($path, $originalName, $mimeType, filesize($path), $error, true); goto s8LtM; WDlwK: sVsCt: goto X44jI; pFu_0: return new UploadedFile($path, $originalName, $mimeType, $error, true); goto WDlwK; oXI0D: file_put_contents($path, $content); goto IwDM3; IwDM3: if (!class_exists("\x53\171\x6d\x66\x6f\x6e\x79\134\103\157\x6d\160\157\156\x65\156\x74\x5c\x48\x74\164\x70\x46\157\165\156\144\x61\164\x69\x6f\156\134\110\145\141\144\145\162\125\x74\x69\154\x73")) { goto sVsCt; } goto pFu_0; MUkBP: $path = tempnam($this->tmpDir, uniqid()); goto oXI0D; s8LtM: } }