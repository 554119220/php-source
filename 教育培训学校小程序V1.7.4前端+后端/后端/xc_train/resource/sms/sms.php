<?php
 goto gb9tt; O6QpI: interface IClientProfile { public function getSigner(); public function getRegionId(); public function getFormat(); public function getCredential(); } goto PvGNY; eRynh: interface ISigner { public function getSignatureMethod(); public function getSignatureVersion(); public function signString($source, $accessSecret); } goto bqRXr; gb9tt: error_reporting(0); goto B3AkZ; zM8HD: define("\105\116\101\x42\x4c\105\x5f\x48\124\124\x50\x5f\x50\122\117\130\131", FALSE); goto Pb9bq; Jq7YF: class ProductDomain { private $productName; private $domainName; function __construct($product, $domain) { $this->productName = $product; $this->domainName = $domain; } public function getProductName() { return $this->productName; } public function setProductName($productName) { $this->productName = $productName; } public function getDomainName() { return $this->domainName; } public function setDomainName($domainName) { $this->domainName = $domainName; } } goto fpnrZ; OolbA: $xml = simplexml_load_string(file_get_contents($endpoint_filename)); goto t3aBP; PvGNY: class DefaultProfile implements IClientProfile { private static $profile; private static $endpoints; private static $credential; private static $regionId; private static $acceptFormat; private static $isigner; private static $iCredential; private function __construct($regionId, $credential) { self::$regionId = $regionId; self::$credential = $credential; } public static function getProfile($regionId, $accessKeyId, $accessSecret) { goto Whrkx; b31y5: self::$profile = new DefaultProfile($regionId, $credential); goto pgCzh; Whrkx: $credential = new Credential($accessKeyId, $accessSecret); goto b31y5; pgCzh: return self::$profile; goto HBumW; HBumW: } public function getSigner() { goto Q062Y; Q062Y: if (!(null == self::$isigner)) { goto trDtK; } goto OtgTy; sB39e: return self::$isigner; goto cfLC4; Esg2v: trDtK: goto sB39e; OtgTy: self::$isigner = new ShaHmac1Signer(); goto Esg2v; cfLC4: } public function getRegionId() { return self::$regionId; } public function getFormat() { return self::$acceptFormat; } public function getCredential() { goto lLkO1; QV4Ze: Zglg3: goto OWaGI; IYSK9: self::$credential = self::$iCredential; goto QV4Ze; OWaGI: return self::$credential; goto JHOfy; lLkO1: if (!(null == self::$credential && null != self::$iCredential)) { goto Zglg3; } goto IYSK9; JHOfy: } public static function getEndpoints() { goto beroK; yWxpO: return self::$endpoints; goto NEy_F; Poxdj: jHJiE: goto yWxpO; beroK: if (!(null == self::$endpoints)) { goto jHJiE; } goto u8G0Z; u8G0Z: self::$endpoints = EndpointProvider::getEndpoints(); goto Poxdj; NEy_F: } public static function addEndpoint($endpointName, $regionId, $product, $domain) { goto q6XxZ; wQrLL: self::addEndpoint_($endpointName, $regionId, $product, $domain); goto CBRid; U1VT3: $endpoint = self::findEndpointByName($endpointName); goto ABmtv; Ws237: goto f80cB; goto kDBPY; jQiHl: self::updateEndpoint($regionId, $product, $domain, $endpoint); goto Ws237; kDBPY: QUKEr: goto wQrLL; hXSHV: oF0bU: goto U1VT3; CBRid: f80cB: goto Cygo0; q6XxZ: if (!(null == self::$endpoints)) { goto oF0bU; } goto EAMca; ABmtv: if (null == $endpoint) { goto QUKEr; } goto jQiHl; EAMca: self::$endpoints = self::getEndpoints(); goto hXSHV; Cygo0: } public static function findEndpointByName($endpointName) { foreach (self::$endpoints as $key => $endpoint) { goto JZV1t; JZV1t: if (!($endpoint->getName() == $endpointName)) { goto k3kOI; } goto YNTMF; YNTMF: return $endpoint; goto iiGcD; iiGcD: k3kOI: goto AZRfy; AZRfy: wDGHt: goto YcKG4; YcKG4: } VFsj1: } private static function addEndpoint_($endpointName, $regionId, $product, $domain) { goto YOSMy; LR7k9: array_push(self::$endpoints, $endpoint); goto iXbGo; YOSMy: $regionIds = array($regionId); goto GWfDB; Nj1tP: $endpoint = new Endpoint($endpointName, $regionIds, $productDomains); goto LR7k9; GWfDB: $productDomains = array(new ProductDomain($product, $domain)); goto Nj1tP; iXbGo: } private static function updateEndpoint($regionId, $product, $domain, $endpoint) { goto frfDp; dQsqw: array_push($productDomains, new ProductDomain($product, $domain)); goto kXuz8; kXuz8: bTY8T: goto glytc; glytc: $endpoint->setProductDomains($productDomains); goto W53nf; rlb5G: $endpoint->setRegionIds($regionIds); goto u2VgS; P281N: if (in_array($regionId, $regionIds)) { goto mGtea; } goto Wx8xB; rsdE1: $productDomains = $endpoint->getProductDomains(); goto XBRCG; XBRCG: if (!(null == self::findProductDomain($productDomains, $product, $domain))) { goto bTY8T; } goto dQsqw; u2VgS: mGtea: goto rsdE1; frfDp: $regionIds = $endpoint->getRegionIds(); goto P281N; Wx8xB: array_push($regionIds, $regionId); goto rlb5G; W53nf: } private static function findProductDomain($productDomains, $product, $domain) { goto yJkpn; fG22y: return null; goto hiEOl; yJkpn: foreach ($productDomains as $key => $productDomain) { goto nt78f; sh7hb: return $productDomain; goto Wo5sn; nt78f: if (!($productDomain->getProductName() == $product && $productDomain->getDomainName() == $domain)) { goto zmyE2; } goto sh7hb; R2jSt: Uv3nB: goto QAYPo; Wo5sn: zmyE2: goto R2jSt; QAYPo: } goto iVaiX; iVaiX: ylif8: goto fG22y; hiEOl: } } goto do5_c; Kct9n: set_time_limit(0); goto Ms1Ln; ctd2w: interface IAcsClient { public function doAction($requst); } goto MpBe8; OGSzm: $endpoints = array(); goto MS1or; bqRXr: class ShaHmac1Signer implements ISigner { public function signString($source, $accessSecret) { return base64_encode(hash_hmac("\x73\x68\141\61", $source, $accessSecret, true)); } public function getSignatureMethod() { return "\110\x4d\x41\103\x2d\x53\x48\x41\61"; } public function getSignatureVersion() { return "\61\56\60"; } } goto ctd2w; bFj5j: class xcHttpResponse { private $body; private $status; public function getBody() { return $this->body; } public function setBody($body) { $this->body = $body; } public function getStatus() { return $this->status; } public function setStatus($status) { $this->status = $status; } public function isSuccess() { goto IE0MV; IE0MV: if (!(200 <= $this->status && 300 > $this->status)) { goto cGh09; } goto uhoqS; uhoqS: return true; goto w01hY; w01hY: cGh09: goto QLTzW; QLTzW: return false; goto bBKFK; bBKFK: } } goto D_0Ga; aVI4A: class LibcurlWrapper { private $curlMultiHandle; private $curlHandleInfo; private $idleCurlHandle; public function __construct() { $this->curlMultiHandle = curl_multi_init(); $this->idleCurlHandle = array(); } public function __destruct() { goto Q4tYi; NXC9S: rwimD: goto Zhx3Q; Zhx3Q: $this->idleCurlHandle = array(); goto ktKfU; Q4tYi: curl_multi_close($this->curlMultiHandle); goto l1pRR; l1pRR: foreach ($this->idleCurlHandle as $handle) { curl_close($handle); LVwK1: } goto NXC9S; ktKfU: } public function startSendingRequest($httpRequest, $done) { goto I39RB; NBJVy: if (!defined("\103\x55\122\114\117\120\124\137\x53\x41\106\105\137\x55\120\x4c\x4f\x41\104")) { goto V8UHo; } goto E4mfz; m_cyp: curl_setopt($curlHandle, CURLOPT_POST, true); goto Hx03Y; rFXRl: $curlHandle = array_pop($this->idleCurlHandle); goto XXMf2; J1Mu7: $curlHandle = curl_init(); goto PmbMW; zV4Vu: if (!($httpRequest->method === "\x50\x4f\x53\x54")) { goto kkExt; } goto NBJVy; h64w8: curl_setopt($curlHandle, CURLOPT_HTTPHEADER, $headers); goto Zu0sI; E4mfz: curl_setopt($curlHandle, CURLOPT_SAFE_UPLOAD, true); goto a2QP9; ETjFF: curl_setopt($curlHandle, CURLOPT_TIMEOUT_MS, $httpRequest->timeoutMs); goto vv1RA; a2QP9: V8UHo: goto m_cyp; zImr1: array_push($headers, "\105\170\160\x65\x63\164\x3a\x20\61\x30\60\55\x63\157\x6e\x74\x69\156\165\145"); goto MFOEK; CnfoU: return false; goto iBzyL; I39RB: if (count($this->idleCurlHandle) !== 0) { goto Pkyal; } goto J1Mu7; MFOEK: array_push($headers, "\x43\157\156\164\145\156\164\x2d\124\x79\x70\145\72\x20\x6d\x75\154\x74\x69\160\141\162\x74\x2f\x66\157\x72\x6d\55\144\141\x74\141\x3b\x20\142\x6f\x75\156\x64\x61\x72\x79\x3d" . $arr[0]); goto cxgr5; cxgr5: curl_setopt($curlHandle, CURLOPT_POSTFIELDS, $arr[1]); goto SaPEQ; Dpg5n: Pkyal: goto rFXRl; VdLZi: $headers = $httpRequest->customHeaders; goto nY18h; Qb_4b: goto KmVYQ; goto Dpg5n; XXMf2: KmVYQ: goto ETjFF; gOe_n: $this->curlHandleInfo[$curlHandle]["\x64\157\x6e\x65"] = $done; goto hXfX1; vv1RA: curl_setopt($curlHandle, CURLOPT_URL, $httpRequest->url); goto YFXul; nY18h: array_push($headers, "\125\x73\x65\x72\x2d\x41\147\x65\156\x74\x3a" . Conf::getUserAgent()); goto zV4Vu; SaPEQ: kkExt: goto h64w8; Zu0sI: curl_multi_add_handle($this->curlMultiHandle, $curlHandle); goto gOe_n; iBzyL: g_Nws: goto Qb_4b; fMRJU: curl_setopt($curlHandle, CURLOPT_RETURNTRANSFER, 1); goto VdLZi; PmbMW: if (!($curlHandle === false)) { goto g_Nws; } goto CnfoU; YFXul: curl_setopt($curlHandle, CURLOPT_HEADER, 1); goto fMRJU; hXfX1: $this->curlHandleInfo[$curlHandle]["\x72\145\x71\x75\x65\x73\x74"] = $httpRequest; goto FFdZ2; Hx03Y: $arr = buildCustomPostFields($httpRequest->dataToPost); goto zImr1; FFdZ2: } public function performSendingRequest() { goto ZJXIx; OFXg7: goto GZPu8; goto H_Efs; ZJXIx: DCQVY: goto Vfspa; mH6Jj: iecLe: goto TxXHS; j4SvI: tZBev: goto rryRF; hTqbF: dEg8w: goto X0b6d; x4rSx: if (!(curl_multi_select($this->curlMultiHandle) == -1)) { goto hl138; } goto kaWU3; Pz4NC: goto sDZzT; goto j4SvI; Vfspa: $active = null; goto Yrit4; FNlJF: $this->processResult($info); goto mH6Jj; EeRQu: sDZzT: goto vkGJg; QzuA9: hl138: goto gp8Yy; rryRF: DETBW: goto NiKMU; p2WUI: $mrc = curl_multi_exec($this->curlMultiHandle, $active); goto SqsEh; gp8Yy: pZWkR: goto p2WUI; Yrit4: xLs54: goto WuZ62; WuZ62: $mrc = curl_multi_exec($this->curlMultiHandle, $active); goto Fv9OY; UyT0U: eI2nN: goto OFXg7; MYgoi: GZPu8: goto FWtUy; TxXHS: if ($mrc == CURLM_CALL_MULTI_PERFORM) { goto xLs54; } goto KD9Tx; FWtUy: if (!($active && $mrc == CURLM_OK)) { goto OGc5a; } goto x4rSx; SqsEh: $info = curl_multi_info_read($this->curlMultiHandle); goto aGQvd; kaWU3: usleep(1); goto QzuA9; UM_zx: if (!(count($this->curlHandleInfo) == 0)) { goto tZBev; } goto Pz4NC; H_Efs: OGc5a: goto UM_zx; KD9Tx: hFbsW: goto MYgoi; X0b6d: if ($mrc == CURLM_CALL_MULTI_PERFORM) { goto pZWkR; } goto UyT0U; aGQvd: if (!($info !== false)) { goto dEg8w; } goto TbFWV; NiKMU: goto DCQVY; goto EeRQu; yhvmH: if (!($info !== false)) { goto iecLe; } goto FNlJF; TbFWV: $this->processResult($info); goto hTqbF; Fv9OY: $info = curl_multi_info_read($this->curlMultiHandle); goto yhvmH; vkGJg: } private function processResult($info) { goto meQ0h; SbuGB: $headerSize = curl_getinfo($handle, CURLINFO_HEADER_SIZE); goto V1xFp; u07VO: $response->curlErrorMessage = curl_error($handle); goto uL1cC; VqnwW: array_push($this->idleCurlHandle, $handle); goto RoM3S; CWSf8: curl_multi_remove_handle($this->curlMultiHandle, $handle); goto VqnwW; z7F19: $response->curlErrorCode = curl_errno($handle); goto CKIl7; uSr1b: $request = $this->curlHandleInfo[$handle]["\162\145\161\165\145\x73\164"]; goto n5gHp; YYUed: if ($result !== CURLE_OK) { goto j7EmC; } goto oi0Cs; CZAQY: RbnRi: goto DJJ2E; h1roe: $response->curlErrorCode = $result; goto u07VO; meQ0h: $result = $info["\x72\x65\x73\x75\154\164"]; goto rbs36; S0GCs: Ufxmy: goto fqDXV; fqDXV: $response->body = $body; goto ol5BH; QLV6R: $headLines = explode("\15\xa", $headerStr); goto pnzMs; CKIl7: $response->curlErrorMessage = curl_error($handle); goto jHx1q; jHx1q: $response->statusCode = curl_getinfo($handle, CURLINFO_HTTP_CODE); goto QLV6R; n5gHp: $done = $this->curlHandleInfo[$handle]["\x64\157\156\x65"]; goto NvZB1; oi0Cs: $responseStr = curl_multi_getcontent($handle); goto SbuGB; rbs36: $handle = $info["\x68\x61\x6e\x64\154\x65"]; goto uSr1b; BvSn6: j7EmC: goto h1roe; ol5BH: call_user_func($done, $request, $response); goto xmspO; uL1cC: call_user_func($done, $request, $response); goto CZAQY; z9bw4: $body = substr($responseStr, $headerSize); goto z7F19; NvZB1: $response = new HttpResponse(); goto YYUed; DJJ2E: unset($this->curlHandleInfo[$handle]); goto CWSf8; xmspO: goto RbnRi; goto BvSn6; V1xFp: $headerStr = substr($responseStr, 0, $headerSize); goto z9bw4; pnzMs: foreach ($headLines as $head) { goto pIHzf; oH6NZ: ivr1x: goto DTqQz; pIHzf: $arr = explode("\x3a", $head); goto lL_q4; VcmZh: YUbnU: goto oH6NZ; lL_q4: if (!(count($arr) >= 2)) { goto YUbnU; } goto kzunr; kzunr: $response->headers[trim($arr[0])] = trim($arr[1]); goto VcmZh; DTqQz: } goto S0GCs; RoM3S: } private function resetCurl($handle) { goto BAAlo; BeqBR: goto o5CyI; goto PliO4; eq4Mk: o5CyI: goto ABk9X; qqzOk: curl_setopt($handler, CURLOPT_SSL_VERIFYPEER, false); goto NCI_q; NCI_q: curl_setopt($handler, CURLOPT_SSL_VERIFYHOST, 0); goto BeqBR; Xe4rN: curl_setopt($handler, CURLOPT_TIMEOUT, 0); goto qqzOk; M9qUA: curl_setopt($handler, CURLOPT_HTTPHEADER, array()); goto fuqu3; nDOQa: curl_reset($handle); goto eq4Mk; ifyS_: curl_setopt($handler, CURLOPT_URL, ''); goto M9qUA; PliO4: yzS0n: goto nDOQa; fuqu3: curl_setopt($handler, CURLOPT_POSTFIELDS, array()); goto Xe4rN; BAAlo: if (function_exists("\143\x75\162\154\137\162\145\163\x65\x74")) { goto yzS0n; } goto ifyS_; ABk9X: } } goto bFj5j; Pb9bq: define("\x48\124\124\120\137\x50\x52\117\x58\131\137\x49\120", "\61\62\67\56\x30\x2e\x30\x2e\61"); goto PBDZV; brKUW: class SendSmsRequest extends RpcAcsRequest { public function __construct() { parent::__construct("\104\171\x73\x6d\163\x61\x70\x69", "\62\60\61\x37\x2d\x30\65\55\62\x35", "\123\x65\x6e\x64\123\x6d\x73"); $this->setMethod("\x50\x4f\123\x54"); } private $templateCode; private $phoneNumbers; private $signName; private $resourceOwnerAccount; private $templateParam; private $resourceOwnerId; private $ownerId; private $outId; private $smsUpExtendCode; public function getTemplateCode() { return $this->templateCode; } public function setTemplateCode($templateCode) { $this->templateCode = $templateCode; $this->queryParameters["\124\145\155\x70\154\x61\x74\x65\103\x6f\x64\x65"] = $templateCode; } public function getPhoneNumbers() { return $this->phoneNumbers; } public function setPhoneNumbers($phoneNumbers) { $this->phoneNumbers = $phoneNumbers; $this->queryParameters["\x50\x68\157\x6e\x65\x4e\x75\155\142\x65\x72\163"] = $phoneNumbers; } public function getSignName() { return $this->signName; } public function setSignName($signName) { $this->signName = $signName; $this->queryParameters["\123\x69\x67\x6e\116\141\155\x65"] = $signName; } public function getResourceOwnerAccount() { return $this->resourceOwnerAccount; } public function setResourceOwnerAccount($resourceOwnerAccount) { $this->resourceOwnerAccount = $resourceOwnerAccount; $this->queryParameters["\x52\145\163\157\x75\162\x63\145\117\167\156\145\x72\101\143\x63\157\x75\156\164"] = $resourceOwnerAccount; } public function getTemplateParam() { return $this->templateParam; } public function setTemplateParam($templateParam) { $this->templateParam = $templateParam; $this->queryParameters["\x54\145\x6d\x70\x6c\x61\x74\x65\x50\x61\162\x61\x6d"] = $templateParam; } public function getResourceOwnerId() { return $this->resourceOwnerId; } public function setResourceOwnerId($resourceOwnerId) { $this->resourceOwnerId = $resourceOwnerId; $this->queryParameters["\x52\x65\163\157\165\162\143\x65\117\x77\156\145\162\x49\144"] = $resourceOwnerId; } public function getOwnerId() { return $this->ownerId; } public function setOwnerId($ownerId) { $this->ownerId = $ownerId; $this->queryParameters["\117\x77\x6e\x65\x72\x49\144"] = $ownerId; } public function getOutId() { return $this->outId; } public function setOutId($outId) { $this->outId = $outId; $this->queryParameters["\x4f\x75\164\111\144"] = $outId; } public function getSmsUpExtendCode() { return $this->smsUpExtendCode; } public function setSmsUpExtendCode($smsUpExtendCode) { $this->smsUpExtendCode = $smsUpExtendCode; $this->queryParameters["\x53\x6d\x73\x55\160\x45\170\x74\145\156\144\103\157\144\x65"] = $smsUpExtendCode; } } goto JYryR; rUu8m: abstract class RpcAcsRequest extends AcsRequest { private $dateTimeFormat = "\131\55\x6d\55\x64\x5c\x54\x48\x3a\151\x3a\163\134\132"; private $domainParameters = array(); function __construct($product, $version, $actionName) { parent::__construct($product, $version, $actionName); $this->initialize(); } private function initialize() { $this->setMethod("\x47\x45\124"); $this->setAcceptFormat("\112\x53\x4f\x4e"); } private function prepareValue($value) { goto KcYgB; Qwnir: return "\146\x61\x6c\163\x65"; goto QGlsj; GPDgd: if ($value) { goto WgLGV; } goto Qwnir; HyGtA: return "\164\x72\x75\x65"; goto d4EU_; CvrZS: return $value; goto Jp1Ee; KcYgB: if (is_bool($value)) { goto AygNo; } goto CvrZS; Jp1Ee: goto QGXEj; goto M3FcL; d4EU_: vVnQU: goto YiFH7; QGlsj: goto vVnQU; goto jq3ZN; jq3ZN: WgLGV: goto HyGtA; YiFH7: QGXEj: goto GVMMp; M3FcL: AygNo: goto GPDgd; GVMMp: } public function composeUrl($iSigner, $credential, $domain) { goto HYl1Z; XTDJ5: $requestUrl = $this->getProtocol() . "\72\57\x2f" . $domain . "\57"; goto a2yoT; BgnW9: date_default_timezone_set("\x47\x4d\x54"); goto qF47r; ex86L: PkUzn: goto Fn35q; oCxHc: q7bEQ: goto NLc83; unlIO: auiQY: goto kt_j3; qF47r: $apiParams["\124\x69\155\x65\x73\164\141\155\160"] = date($this->dateTimeFormat); goto IOZ2C; fzaGC: $apiParams["\x53\x69\x67\x6e\x61\x74\165\x72\x65"] = $this->computeSignature($apiParams, $credential->getAccessSecret(), $iSigner); goto CvSqH; Fn35q: return $requestUrl; goto unlIO; Dqb4n: pbQXD: goto SIvs1; eYZ7J: $apiParams["\x56\x65\x72\x73\x69\x6f\156"] = $this->getVersion(); goto fzaGC; hdMSo: $apiParams["\x41\x63\143\145\163\x73\113\145\171\x49\x64"] = $credential->getAccessKeyId(); goto Ud6wk; jVp_s: $apiParams["\x53\x69\147\156\x61\164\x75\162\x65\x4e\x6f\156\143\145"] = uniqid(mt_rand(0, 0xffff), true); goto BgnW9; HYl1Z: $apiParams = parent::getQueryParameters(); goto LTMVY; no1ra: $apiParams["\x53\151\147\x6e\141\164\165\x72\145\x4d\x65\164\150\157\x64"] = $iSigner->getSignatureMethod(); goto PfC61; CvSqH: if (parent::getMethod() == "\120\x4f\x53\124") { goto LtwaT; } goto hY1MO; vIyyw: foreach ($apiParams as $apiParamKey => $apiParamValue) { $requestUrl .= "{$apiParamKey}\x3d" . urlencode($apiParamValue) . "\x26"; QA2Th: } goto Dqb4n; cS50K: LtwaT: goto XTDJ5; SIvs1: return substr($requestUrl, 0, -1); goto xtojn; PfC61: $apiParams["\x53\151\147\x6e\x61\164\x75\162\145\x56\x65\x72\x73\151\x6f\156"] = $iSigner->getSignatureVersion(); goto jVp_s; NLc83: $apiParams["\x52\145\x67\x69\157\x6e\x49\x64"] = $this->getRegionId(); goto hdMSo; xtojn: goto auiQY; goto cS50K; LTMVY: foreach ($apiParams as $key => $value) { $apiParams[$key] = $this->prepareValue($value); Mk8RS: } goto oCxHc; a2yoT: foreach ($apiParams as $apiParamKey => $apiParamValue) { $this->putDomainParameters($apiParamKey, $apiParamValue); chaE9: } goto ex86L; hY1MO: $requestUrl = $this->getProtocol() . "\72\57\57" . $domain . "\x2f\x3f"; goto vIyyw; IOZ2C: $apiParams["\x41\143\x74\x69\x6f\x6e"] = $this->getActionName(); goto eYZ7J; Ud6wk: $apiParams["\x46\x6f\162\x6d\x61\164"] = $this->getAcceptFormat(); goto no1ra; kt_j3: } private function computeSignature($parameters, $accessKeySecret, $iSigner) { goto AJxJh; AJxJh: ksort($parameters); goto ghIFi; AbQpC: return $signature; goto i7Lqy; QcEVC: $stringToSign = parent::getMethod() . "\x26\45\62\106\46" . $this->percentencode(substr($canonicalizedQueryString, 1)); goto NJQq4; RlENx: LmpvF: goto QcEVC; SNjGC: foreach ($parameters as $key => $value) { $canonicalizedQueryString .= "\46" . $this->percentEncode($key) . "\x3d" . $this->percentEncode($value); HNeTs: } goto RlENx; ghIFi: $canonicalizedQueryString = ''; goto SNjGC; NJQq4: $signature = $iSigner->signString($stringToSign, $accessKeySecret . "\x26"); goto AbQpC; i7Lqy: } protected function percentEncode($str) { goto IRv3s; qZVbk: $res = preg_replace("\x2f\x5c\53\57", "\x25\62\x30", $res); goto gKow9; egMvL: return $res; goto C2Fh5; gKow9: $res = preg_replace("\x2f\x5c\52\57", "\x25\x32\x41", $res); goto Ka5lM; Ka5lM: $res = preg_replace("\x2f\45\x37\105\57", "\x7e", $res); goto egMvL; IRv3s: $res = urlencode($str); goto qZVbk; C2Fh5: } public function getDomainParameter() { return $this->domainParameters; } public function putDomainParameters($name, $value) { $this->domainParameters[$name] = $value; } } goto brKUW; v780Q: class ClientException extends \Exception { function __construct($errorMessage, $errorCode) { goto cjkkE; TIrAG: $this->errorCode = $errorCode; goto Y23hB; Y23hB: $this->setErrorType("\x43\x6c\151\145\x6e\x74"); goto wFqPz; cjkkE: parent::__construct($errorMessage); goto lf1zR; lf1zR: $this->errorMessage = $errorMessage; goto TIrAG; wFqPz: } private $errorCode; private $errorMessage; private $errorType; public function getErrorCode() { return $this->errorCode; } public function setErrorCode($errorCode) { $this->errorCode = $errorCode; } public function getErrorMessage() { return $this->errorMessage; } public function setErrorMessage($errorMessage) { $this->errorMessage = $errorMessage; } public function getErrorType() { return $this->errorType; } public function setErrorType($errorType) { $this->errorType = $errorType; } } goto eRynh; t3aBP: $json = json_encode($xml); goto iZ5P1; JYryR: class xcap_SmsDemo { static $acsClient = null; public static function getAcsClient($AccessKeyId, $AccessKeySecret) { goto W0xTc; W0xTc: $product = "\104\x79\163\x6d\163\141\x70\151"; goto XB3OT; sdeq1: if (!(static::$acsClient == null)) { goto PPnn_; } goto nxMs1; YaziL: DefaultProfile::addEndpoint($endPointName, $region, $product, $domain); goto DW9BF; u2M2H: return static::$acsClient; goto R8BcO; nxMs1: $profile = DefaultProfile::getProfile($region, $accessKeyId, $accessKeySecret); goto YaziL; Qjj58: $region = "\143\x6e\x2d\150\141\x6e\x67\x7a\150\x6f\x75"; goto CQdhM; XB3OT: $domain = "\144\171\163\155\163\x61\x70\x69\56\141\154\151\x79\x75\156\x63\163\x2e\x63\x6f\155"; goto nLXV2; nLXV2: $accessKeyId = $AccessKeyId; goto Jr1O2; DW9BF: static::$acsClient = new DefaultAcsClient($profile); goto PoyIM; Jr1O2: $accessKeySecret = $AccessKeySecret; goto Qjj58; CQdhM: $endPointName = "\x63\156\x2d\x68\141\x6e\147\x7a\x68\x6f\x75"; goto sdeq1; PoyIM: PPnn_: goto u2M2H; R8BcO: } public static function sendSms($AccessKeyId, $AccessKeySecret, $signName, $templateCode, $phoneNumbers, $templateParam = null, $outId = null, $smsUpExtendCode = null) { goto cDv_l; sCRk8: $request->setPhoneNumbers($phoneNumbers); goto mlI3x; H39uF: $request->setTemplateParam(json_encode($templateParam)); goto t9XDz; Rxr0s: if (!$templateParam) { goto ij3w9; } goto H39uF; ig462: $request->setTemplateCode($templateCode); goto Rxr0s; mlI3x: $request->setSignName($signName); goto ig462; t9XDz: ij3w9: goto GVO0T; FIUdR: $request->setOutId($outId); goto XhzrW; cDv_l: $request = new SendSmsRequest(); goto sCRk8; XhzrW: SIQwk: goto EjRob; uh_Vz: return $acsResponse; goto mxGu5; EjRob: if (!$smsUpExtendCode) { goto z0GH4; } goto w0oDa; rrrdd: $acsResponse = static::getAcsClient($AccessKeyId, $AccessKeySecret)->getAcsResponse($request); goto uh_Vz; w0oDa: $request->setSmsUpExtendCode($smsUpExtendCode); goto A_Dgs; GVO0T: if (!$outId) { goto SIQwk; } goto FIUdR; A_Dgs: z0GH4: goto rrrdd; mxGu5: } public function queryDetails($phoneNumbers, $sendDate, $pageSize = 10, $currentPage = 1, $bizId = null) { goto SGQUr; jh06q: return $acsResponse; goto Bj8EO; JtpUz: $request->setPageSize($pageSize); goto RA4Oa; RA4Oa: $request->setCurrentPage($currentPage); goto RrdxV; RrdxV: $acsResponse = static::getAcsClient()->getAcsResponse($request); goto jh06q; Q8I6f: $request->setSendDate($sendDate); goto JtpUz; jeHH3: $request->setPhoneNumber($phoneNumbers); goto fNrPM; SGQUr: $request = new QuerySendDetailsRequest(); goto jeHH3; fNrPM: $request->setBizId($bizId); goto Q8I6f; Bj8EO: } } goto Kct9n; PBDZV: define("\x48\124\x54\x50\x5f\x50\122\117\130\131\x5f\120\117\x52\124", "\x38\x38\x38\70"); goto TSwXv; fpnrZ: class EndpointProvider { private static $endpoints; public static function findProductDomain($regionId, $product) { goto nf_2v; ryyJ8: return null; goto x1_fF; nf_2v: if (!(null == $regionId || null == $product || null == self::$endpoints)) { goto Urws0; } goto ryyJ8; LO0wP: return null; goto pRLcI; ptbV4: r10P4: goto LO0wP; Xk6Sz: foreach (self::$endpoints as $key => $endpoint) { goto rZ6YQ; Lqthn: L10gM: goto jjFe2; rZ6YQ: if (!in_array($regionId, $endpoint->getRegionIds())) { goto L10gM; } goto LDmoY; LDmoY: return self::findProductDomainByProduct($endpoint->getProductDomains(), $product); goto Lqthn; jjFe2: UVY7d: goto onp02; onp02: } goto ptbV4; x1_fF: Urws0: goto Xk6Sz; pRLcI: } private static function findProductDomainByProduct($productDomains, $product) { goto j3lgT; Z1TD9: return null; goto DzLIF; j3lgT: if (!(null == $productDomains)) { goto phxoF; } goto s8a91; NdIY2: WqMoO: goto Z1TD9; s8a91: return null; goto RCPAJ; RCPAJ: phxoF: goto U1Ky0; U1Ky0: foreach ($productDomains as $key => $productDomain) { goto K40v8; K40v8: if (!($product == $productDomain->getProductName())) { goto lucx9; } goto yzASb; yzASb: return $productDomain->getDomainName(); goto JfGz5; DlObQ: cpTgN: goto GHAeC; JfGz5: lucx9: goto DlObQ; GHAeC: } goto NdIY2; DzLIF: } public static function getEndpoints() { return self::$endpoints; } public static function setEndpoints($endpoints) { self::$endpoints = $endpoints; } } goto mQ_Da; MS1or: foreach ($json_array["\105\156\x64\160\157\x69\x6e\164"] as $json_endpoint) { goto GP6WX; RphBd: Y6oU2: goto Qjb14; jNhxd: $product_domains = array(); goto qLCQ8; oHX3i: $endpoint = new Endpoint($region_ids[0], $region_ids, $product_domains); goto eiWN2; rlska: if (array() === $json_products or !is_array($json_products)) { goto AKSlL; } goto qy9Cv; fgS3m: v1msG: goto GmVMW; vMBu7: $json_products = $json_endpoint["\x50\162\x6f\144\165\143\164\x73"]["\x50\162\157\x64\x75\x63\164"]; goto rlska; qy9Cv: if (array_keys($json_products) !== range(0, count($json_products) - 1)) { goto YVEuo; } goto YTZtt; GP6WX: if (!array_key_exists("\122\145\147\151\157\156\x49\x64", $json_endpoint["\122\145\147\151\x6f\156\x49\x64\x73"])) { goto IpbGN; } goto IMo99; IMo99: $json_region_ids = $json_endpoint["\122\x65\147\151\x6f\x6e\x49\x64\x73"]["\122\x65\147\151\x6f\156\x49\144"]; goto IPpiW; zYw6o: goto DiagL; goto UFO_6; eiWN2: array_push($endpoints, $endpoint); goto fgS3m; CCYWd: $products = array(); goto PUmyE; sF6f5: $region_ids = array($json_region_ids); goto bPkHU; RhGYL: goto Y6oU2; goto ERLnE; UFO_6: IpbGN: goto QYI2v; IPpiW: if (!is_array($json_region_ids)) { goto Xi64Z; } goto velZ9; B6VDZ: goto xiSgp; goto EYa31; QYI2v: $region_ids = array(); goto CvnbP; PUmyE: jEMIS: goto jNhxd; YTZtt: $products = $json_products; goto B6VDZ; EYa31: YVEuo: goto Qy6K4; CvnbP: DiagL: goto tYhJp; ERLnE: AKSlL: goto Z1VLi; o4nLl: xiSgp: goto RhGYL; Qjb14: goto jEMIS; goto nbBmR; ZigmX: Fjd7M: goto oHX3i; bPkHU: B5oxx: goto zYw6o; tYhJp: if (!array_key_exists("\x50\162\157\144\165\x63\x74", $json_endpoint["\x50\x72\x6f\x64\165\x63\164\163"])) { goto sW9Ui; } goto vMBu7; qLCQ8: foreach ($products as $product) { goto xZKXr; SQ644: array_push($product_domains, $product_domain); goto TKeqL; TKeqL: q0dBh: goto Fl1hW; xZKXr: $product_domain = new ProductDomain($product["\120\162\157\x64\x75\143\164\x4e\x61\155\145"], $product["\x44\157\155\x61\151\156\x4e\x61\155\x65"]); goto SQ644; Fl1hW: } goto ZigmX; Z1VLi: $products = array(); goto RphBd; U3Ka4: Xi64Z: goto sF6f5; PG8JD: goto B5oxx; goto U3Ka4; nbBmR: sW9Ui: goto CCYWd; Qy6K4: $products = array($json_products); goto o4nLl; velZ9: $region_ids = $json_region_ids; goto PG8JD; GmVMW: } goto cZpPN; mQ_Da: class Credential { private $dateTimeFormat = "\x59\x2d\155\55\x64\134\124\x48\72\x69\72\163\134\x5a"; private $refreshDate; private $expiredDate; private $accessKeyId; private $accessSecret; private $securityToken; function __construct($accessKeyId, $accessSecret) { goto ovWkx; HSi2V: $this->accessSecret = $accessSecret; goto kUiSq; ovWkx: $this->accessKeyId = $accessKeyId; goto HSi2V; kUiSq: $this->refreshDate = date($this->dateTimeFormat); goto yR9jK; yR9jK: } public function isExpired() { goto aG6d_; X3QZi: yOlFR: goto ToRhF; FACpT: if (!(strtotime($this->expiredDate) > date($this->dateTimeFormat))) { goto yOlFR; } goto oLPBP; oLPBP: return false; goto X3QZi; MF969: wIx2N: goto FACpT; dw29Y: return false; goto MF969; aG6d_: if (!($this->expiredDate == null)) { goto wIx2N; } goto dw29Y; ToRhF: return true; goto ljrlr; ljrlr: } public function getRefreshDate() { return $this->refreshDate; } public function getExpiredDate() { return $this->expiredDate; } public function setExpiredDate($expiredHours) { goto ZJhrN; WH44X: return $this->expiredDate = date($this->dateTimeFormat, strtotime("\x2b" . $expiredHours . "\x20\x68\157\x75\x72")); goto qsKOE; ZJhrN: if (!($expiredHours > 0)) { goto bo5u1; } goto WH44X; qsKOE: bo5u1: goto rz2JG; rz2JG: } public function getAccessKeyId() { return $this->accessKeyId; } public function setAccessKeyId($accessKeyId) { $this->accessKeyId = $accessKeyId; } public function getAccessSecret() { return $this->accessSecret; } public function setAccessSecret($accessSecret) { $this->accessSecret = $accessSecret; } } goto O6QpI; B3AkZ: ini_set("\144\x69\x73\x70\154\x61\171\137\145\x72\x72\x6f\162\x73", 0); goto zM8HD; MS4hN: class HttpResponse { public $curlErrorCode; public $curlErrorMessage; public $statusCode; public $headers; public $body; } goto aVI4A; iZ5P1: $json_array = json_decode($json, TRUE); goto OGSzm; D_0Ga: class HttpHelper { public static $connectTimeout = 30; public static $readTimeout = 80; public static function curl($url, $httpMethod = "\107\x45\124", $postFields = null, $headers = null) { goto t3N1T; aUBXo: curl_setopt($ch, CURLOPT_PROXYPORT, HTTP_PROXY_PORT); goto r9qa2; SQyNs: if (!ENABLE_HTTP_PROXY) { goto Ko1p6; } goto jFDYq; Hh0sX: curl_setopt($ch, CURLOPT_CONNECTTIMEOUT, self::$connectTimeout); goto OiDHv; MKcrM: $httpHeaders = self::getHttpHearders($headers); goto YrshI; QEoU9: curl_setopt($ch, CURLOPT_CUSTOMREQUEST, $httpMethod); goto SQyNs; mZPQA: curl_setopt($ch, CURLOPT_SSL_VERIFYPEER, false); goto hG7jy; k2Pep: $httpResponse = new xcHttpResponse(); goto jnx3U; Llazt: $httpResponse->setStatus(curl_getinfo($ch, CURLINFO_HTTP_CODE)); goto oKDhB; PMcjJ: Ko1p6: goto XCYyG; nj1Db: if (!(is_array($headers) && 0 < count($headers))) { goto e_cXh; } goto MKcrM; xeGZ4: if (!self::$connectTimeout) { goto quWSj; } goto Hh0sX; y8rMg: curl_setopt($ch, CURLOPT_TIMEOUT, self::$readTimeout); goto T6TX1; Jx1ec: curl_setopt($ch, CURLOPT_PROXY, HTTP_PROXY_IP); goto aUBXo; YrshI: curl_setopt($ch, CURLOPT_HTTPHEADER, $httpHeaders); goto idx2s; Ymcrk: curl_close($ch); goto Kdlzn; N9IfW: curl_setopt($ch, CURLOPT_FAILONERROR, false); goto V8CFM; r9qa2: curl_setopt($ch, CURLOPT_PROXYTYPE, CURLPROXY_HTTP); goto PMcjJ; xBinA: P3jj6: goto nj1Db; V8CFM: curl_setopt($ch, CURLOPT_RETURNTRANSFER, true); goto DNUNu; D0Z8q: if (!self::$readTimeout) { goto Ye7SI; } goto y8rMg; X8YIe: if (!(strlen($url) > 5 && strtolower(substr($url, 0, 5)) == "\x68\164\x74\160\x73")) { goto P3jj6; } goto mZPQA; S0UZE: throw new ClientException("\123\145\162\166\145\x72\x20\165\x6e\x72\x65\x61\143\x68\141\x62\154\x65\72\40\x45\162\162\x6e\x6f\x3a\40" . curl_errno($ch) . "\40" . curl_error($ch), "\123\104\113\x2e\123\x65\162\166\x65\162\125\x6e\162\x65\x61\x63\150\x61\x62\154\x65"); goto byRWb; DNUNu: curl_setopt($ch, CURLOPT_POSTFIELDS, is_array($postFields) ? self::getPostHttpBody($postFields) : $postFields); goto D0Z8q; Kdlzn: return $httpResponse; goto S1AJH; jFDYq: curl_setopt($ch, CURLOPT_PROXYAUTH, CURLAUTH_BASIC); goto Jx1ec; jnx3U: $httpResponse->setBody(curl_exec($ch)); goto Llazt; byRWb: ET3oU: goto Ymcrk; XCYyG: curl_setopt($ch, CURLOPT_URL, $url); goto N9IfW; t3N1T: $ch = curl_init(); goto QEoU9; oKDhB: if (!curl_errno($ch)) { goto ET3oU; } goto S0UZE; idx2s: e_cXh: goto k2Pep; hG7jy: curl_setopt($ch, CURLOPT_SSL_VERIFYHOST, false); goto xBinA; T6TX1: Ye7SI: goto xeGZ4; OiDHv: quWSj: goto X8YIe; S1AJH: } static function getPostHttpBody($postFildes) { goto cuKPu; bGZOe: foreach ($postFildes as $apiParamKey => $apiParamValue) { $content .= "{$apiParamKey}\x3d" . urlencode($apiParamValue) . "\46"; GK_C_: } goto g42xs; lX3kQ: return substr($content, 0, -1); goto Rmzhi; g42xs: efF7V: goto lX3kQ; cuKPu: $content = ''; goto bGZOe; Rmzhi: } static function getHttpHearders($headers) { goto QKT_n; sO1qc: return $httpHeader; goto lTXHp; WzS6u: foreach ($headers as $key => $value) { array_push($httpHeader, $key . "\72" . $value); hfXM8: } goto vnBia; vnBia: TU2ue: goto sO1qc; QKT_n: $httpHeader = array(); goto WzS6u; lTXHp: } } goto v780Q; Ms1Ln: header("\103\x6f\156\164\x65\x6e\164\x2d\x54\x79\160\x65\72\x20\164\x65\170\x74\57\x70\x6c\141\x69\x6e\x3b\40\143\x68\x61\162\x73\x65\x74\x3d\165\164\x66\55\x38"); goto I6l9d; I6l9d: $endpoint_filename = dirname(__FILE__) . DIRECTORY_SEPARATOR . "\145\156\144\160\x6f\151\x6e\164\163\x2e\x78\155\154"; goto OolbA; do5_c: abstract class AcsRequest { protected $version; protected $product; protected $actionName; protected $regionId; protected $acceptFormat; protected $method; protected $protocolType = "\x68\x74\164\x70"; protected $content; protected $queryParameters = array(); protected $headers = array(); function __construct($product, $version, $actionName) { goto RT49r; jC0u6: $this->product = $product; goto PzAI5; Ahp15: $this->actionName = $actionName; goto bcEEJ; RT49r: $this->headers["\x78\55\x73\x64\x6b\55\143\154\x69\x65\x6e\x74"] = "\160\x68\x70\57\x32\56\60\56\60"; goto jC0u6; PzAI5: $this->version = $version; goto Ahp15; bcEEJ: } public abstract function composeUrl($iSigner, $credential, $domain); public function getVersion() { return $this->version; } public function setVersion($version) { $this->version = $version; } public function getProduct() { return $this->product; } public function setProduct($product) { $this->product = $product; } public function getActionName() { return $this->actionName; } public function setActionName($actionName) { $this->actionName = $actionName; } public function getAcceptFormat() { return $this->acceptFormat; } public function setAcceptFormat($acceptFormat) { $this->acceptFormat = $acceptFormat; } public function getQueryParameters() { return $this->queryParameters; } public function getHeaders() { return $this->headers; } public function getMethod() { return $this->method; } public function setMethod($method) { $this->method = $method; } public function getProtocol() { return $this->protocolType; } public function setProtocol($protocol) { $this->protocolType = $protocol; } public function getRegionId() { return $this->regionId; } public function setRegionId($region) { $this->regionId = $region; } public function getContent() { return $this->content; } public function setContent($content) { $this->content = $content; } public function addHeader($headerKey, $headerValue) { $this->headers[$headerKey] = $headerValue; } } goto rUu8m; TSwXv: class HttpRequest { public $timeoutMs; public $url; public $method; public $customHeaders; public $dataToPost; public $userData; } goto MS4hN; MpBe8: class DefaultAcsClient implements IAcsClient { public $iClientProfile; public $__urlTestFlag__; function __construct($iClientProfile) { $this->iClientProfile = $iClientProfile; $this->__urlTestFlag__ = false; } public function getAcsResponse($request, $iSigner = null, $credential = null, $autoRetry = true, $maxRetryNumber = 3) { goto oOcHy; oOcHy: $httpResponse = $this->doActionImpl($request, $iSigner, $credential, $autoRetry, $maxRetryNumber); goto MtNZ5; S7w2J: return $respObject; goto SklnN; QMrlV: if (!(false == $httpResponse->isSuccess())) { goto kzOb1; } goto XySKJ; XySKJ: $this->buildApiException($respObject, $httpResponse->getStatus()); goto k9RLo; MtNZ5: $respObject = $this->parseAcsResponse($httpResponse->getBody(), $request->getAcceptFormat()); goto QMrlV; k9RLo: kzOb1: goto S7w2J; SklnN: } private function doActionImpl($request, $iSigner = null, $credential = null, $autoRetry = true, $maxRetryNumber = 3) { goto PG8sr; AGbhg: if (!(null == $credential)) { goto Sjlxb; } goto RYmfn; Clk1J: ql3GO: goto ATdu4; gvYWX: $retryTimes = 1; goto q9QoK; C9z5f: if (!$this->__urlTestFlag__) { goto ql3GO; } goto NhHuc; XH0Ta: H37b6: goto lhmrd; U4J8W: $httpResponse = HttpHelper::curl($requestUrl, $request->getMethod(), $request->getDomainParameter(), $request->getHeaders()); goto vMB8Q; PG8sr: if (!(null == $this->iClientProfile && (null == $iSigner || null == $credential || null == $request->getRegionId() || null == $request->getAcceptFormat()))) { goto H37b6; } goto e2OQ2; zyPZI: ZmK5q: goto qqib8; OKJXo: d7rag: goto cd7_4; NhHuc: throw new ClientException($requestUrl, "\125\x52\x4c\x54\x65\x73\x74\106\x6c\141\x67\111\x73\x53\145\164"); goto Clk1J; yTIyL: $requestUrl = $request->composeUrl($iSigner, $credential, $domain); goto TOBRP; AamhX: $httpResponse = HttpHelper::curl($requestUrl, $request->getMethod(), $request->getContent(), $request->getHeaders()); goto MOQGO; cHrII: Sjlxb: goto M_428; WsRbW: $httpResponse = HttpHelper::curl($requestUrl, $request->getDomainParameter(), $request->getHeaders()); goto OKF7_; e2OQ2: throw new ClientException("\116\x6f\x20\x61\143\164\151\x76\145\x20\x70\x72\x6f\x66\x69\x6c\145\40\146\157\x75\x6e\144\56", "\123\x44\x4b\56\x49\156\166\141\x6c\151\144\120\x72\x6f\146\x69\154\145"); goto XH0Ta; lhmrd: if (!(null == $iSigner)) { goto Mz91T; } goto ZX32z; JTUyw: throw new ClientException("\103\x61\156\40\x6e\157\164\40\x66\151\x6e\144\x20\145\156\144\160\x6f\x69\156\x74\x20\x74\x6f\40\x61\143\143\x65\x73\x73\x2e", "\123\x44\x4b\x2e\x49\x6e\166\141\154\x69\x64\122\145\147\151\x6f\156\x49\144"); goto zyPZI; Cr79O: goto CxX6c; goto G1r0v; q9QoK: WyYUq: goto t9UEV; ATdu4: if (count($request->getDomainParameter()) > 0) { goto osG8A; } goto f7NSj; G1r0v: osG8A: goto U4J8W; vMB8Q: CxX6c: goto gvYWX; zB6b3: if (!(null == $domain)) { goto ZmK5q; } goto JTUyw; TOBRP: if (count($request->getDomainParameter()) > 0) { goto xnkZG; } goto AamhX; MOQGO: goto wdg8u; goto ETe7i; MEIGK: goto WyYUq; goto OKJXo; t9UEV: if (!(500 <= $httpResponse->getStatus() && $autoRetry && $retryTimes < $maxRetryNumber)) { goto d7rag; } goto yTIyL; svf1p: Mz91T: goto AGbhg; M_428: $request = $this->prepareRequest($request); goto BThzy; OKF7_: wdg8u: goto ePVJ7; qqib8: $requestUrl = $request->composeUrl($iSigner, $credential, $domain); goto C9z5f; ePVJ7: $retryTimes++; goto MEIGK; cd7_4: return $httpResponse; goto DtonT; ETe7i: xnkZG: goto WsRbW; ZX32z: $iSigner = $this->iClientProfile->getSigner(); goto svf1p; f7NSj: $httpResponse = HttpHelper::curl($requestUrl, $request->getMethod(), $request->getContent(), $request->getHeaders()); goto Cr79O; BThzy: $domain = EndpointProvider::findProductDomain($request->getRegionId(), $request->getProduct()); goto zB6b3; RYmfn: $credential = $this->iClientProfile->getCredential(); goto cHrII; DtonT: } public function doAction($request, $iSigner = null, $credential = null, $autoRetry = true, $maxRetryNumber = 3) { trigger_error("\x64\157\x41\143\164\151\157\x6e\x28\51\x20\x69\163\x20\144\x65\x70\x72\x65\x63\x61\164\x65\x64\56\x20\120\x6c\145\141\163\x65\x20\165\x73\145\40\x67\x65\164\101\143\163\122\145\163\160\x6f\156\163\145\50\51\40\x69\x6e\163\x74\x65\x61\144\x2e", E_USER_NOTICE); return $this->doActionImpl($request, $iSigner, $credential, $autoRetry, $maxRetryNumber); } private function prepareRequest($request) { goto pXHHI; niBis: return $request; goto VG5VF; qwtjA: $request->setAcceptFormat($this->iClientProfile->getFormat()); goto VuA2D; pXHHI: if (!(null == $request->getRegionId())) { goto Q7Pmy; } goto GOEUh; aUcYq: if (!(null == $request->getAcceptFormat())) { goto wjTtk; } goto qwtjA; GQPOC: if (!(null == $request->getMethod())) { goto fZFad; } goto oeO9_; VuA2D: wjTtk: goto GQPOC; oeO9_: $request->setMethod("\107\x45\x54"); goto J6a8e; J6a8e: fZFad: goto niBis; DrGjH: Q7Pmy: goto aUcYq; GOEUh: $request->setRegionId($this->iClientProfile->getRegionId()); goto DrGjH; VG5VF: } private function buildApiException($respObject, $httpStatus) { throw new ServerException($respObject->Message, $respObject->Code, $httpStatus, $respObject->RequestId); } private function parseAcsResponse($body, $format) { goto cJHW5; lvdJt: $respObject = $body; goto Ll2wg; u3X8u: goto Vc7JE; goto Fxhlf; REZjZ: return $respObject; goto hGyuF; vkaTq: $respObject = json_decode($body); goto o7mt_; EqBZY: goto LmtuK; goto vvPlM; Fxhlf: kbU01: goto A2lMw; Q1rW3: Vc7JE: goto EqBZY; u_l9C: if ("\130\x4d\x4c" == $format) { goto kbU01; } goto m8mZu; Ll2wg: ee9Oj: goto u3X8u; cJHW5: if ("\112\x53\117\x4e" == $format) { goto HFOBe; } goto u_l9C; A2lMw: $respObject = @simplexml_load_string($body); goto Q1rW3; o7mt_: LmtuK: goto REZjZ; m8mZu: if (!("\x52\101\127" == $format)) { goto ee9Oj; } goto lvdJt; vvPlM: HFOBe: goto vkaTq; hGyuF: } } goto gXmEm; cZpPN: sPVbu: goto Ko3F8; gXmEm: class Endpoint { private $name; private $regionIds; private $productDomains; function __construct($name, $regionIds, $productDomains) { goto wlOYi; Disui: $this->productDomains = $productDomains; goto T0Las; wlOYi: $this->name = $name; goto NEpUp; NEpUp: $this->regionIds = $regionIds; goto Disui; T0Las: } public function getName() { return $this->name; } public function setName($name) { $this->name = $name; } public function getRegionIds() { return $this->regionIds; } public function setRegionIds($regionIds) { $this->regionIds = $regionIds; } public function getProductDomains() { return $this->productDomains; } public function setProductDomains($productDomains) { $this->productDomains = $productDomains; } } goto Jq7YF; Ko3F8: EndpointProvider::setEndpoints($endpoints);