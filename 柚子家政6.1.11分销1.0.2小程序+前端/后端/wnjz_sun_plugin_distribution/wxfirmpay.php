<?php
 class WeixinfirmPay { protected $mch_appid; protected $mchid; protected $key; protected $openid; protected $partner_trade_no; protected $re_user_name; protected $desc; protected $amount; protected $apiclient_cert; protected $apiclient_key; function __construct($mch_appid, $mchid, $key, $openid, $partner_trade_no, $re_user_name, $desc, $amount, $apiclient_cert, $apiclient_key) { goto lUEUz; vogRO: $this->desc = $desc; goto tvBju; lUEUz: $this->mch_appid = $mch_appid; goto zL1v3; Tkyoj: $this->partner_trade_no = $partner_trade_no; goto SU7z7; SU7z7: $this->re_user_name = $re_user_name; goto vogRO; z3VkJ: $this->apiclient_key = $apiclient_key; goto TUkva; zL1v3: $this->mchid = $mchid; goto s5KP5; v__ug: $this->apiclient_cert = $apiclient_cert; goto z3VkJ; s5KP5: $this->key = $key; goto yktUo; tvBju: $this->amount = $amount; goto v__ug; yktUo: $this->openid = $openid; goto Tkyoj; TUkva: } public function pay() { $return = $this->unifiedorder(); return $return; } private function unifiedorder() { goto xk_0N; dI6t4: return $return; goto qa2WX; r08qe: $parameters["\x73\x69\x67\x6e"] = $this->getSign($parameters); goto vjTdz; SveUR: $parameters = array("\155\x63\150\x5f\141\x70\x70\151\x64" => $this->mch_appid, "\155\143\x68\x69\x64" => $this->mchid, "\156\157\156\143\145\137\163\x74\162" => $this->createNoncestr(), "\160\x61\x72\164\156\145\x72\x5f\x74\x72\141\144\x65\137\156\157" => $this->partner_trade_no, "\157\x70\145\156\x69\144" => $this->openid, "\143\150\145\143\153\137\x6e\141\x6d\x65" => "\x4e\x4f\x5f\x43\110\x45\103\x4b", "\162\145\137\165\163\x65\x72\x5f\x6e\x61\x6d\145" => $this->re_user_name, "\x61\155\157\x75\156\164" => $this->amount, "\x64\x65\x73\x63" => $this->desc, "\x73\x70\x62\x69\154\x6c\137\143\162\145\x61\x74\x65\x5f\x69\160" => "\61\62\60\56\67\71\x2e\61\65\62\56\x31\x30\65"); goto r08qe; xk_0N: $url = "\150\164\x74\x70\163\x3a\57\x2f\141\160\x69\x2e\x6d\x63\x68\x2e\x77\x65\151\x78\151\156\56\x71\161\x2e\143\x6f\155\x2f\155\155\160\141\171\155\153\x74\x74\x72\x61\156\163\x66\x65\x72\163\x2f\x70\162\x6f\x6d\x6f\x74\151\x6f\x6e\57\164\162\x61\156\x73\x66\145\x72\163"; goto SveUR; vjTdz: $xmlData = $this->arrayToXml($parameters); goto V3VV_; V3VV_: $return = $this->xmlToArray($this->postXmlCurl($xmlData, $url, 60, $this->apiclient_cert, $this->apiclient_key)); goto dI6t4; qa2WX: } private static function postXmlCurl($xml, $url, $second = 30, $apiclient_cert, $apiclient_key) { goto Yic1t; E3gww: return $data; goto hKM5h; lXCuZ: curl_setopt($ch, CURLOPT_TIMEOUT, $second); goto IMrON; Yic1t: $ch = curl_init(); goto lXCuZ; KYQOM: curl_setopt($ch, CURLOPT_HEADER, FALSE); goto Tazt5; h1Nc5: curl_close($ch); goto E3gww; Us7D_: $error = curl_errno($ch); goto GZx46; Lf8xr: goto i6qI_; goto Tkm1d; qclz1: curl_setopt($ch, CURLOPT_SSLCERT, $apiclient_cert); goto zSIt1; zSIt1: curl_setopt($ch, CURLOPT_SSLKEY, $apiclient_key); goto jIFwx; hKM5h: i6qI_: goto C2rHU; W3GOX: $data = curl_exec($ch); goto Mw6JD; Mw6JD: if ($data) { goto HWbqa; } goto Us7D_; Tazt5: curl_setopt($ch, CURLOPT_RETURNTRANSFER, TRUE); goto oiC9U; cclq4: curl_setopt($ch, CURLOPT_POSTFIELDS, $xml); goto z7V67; IMrON: curl_setopt($ch, CURLOPT_URL, $url); goto aeti0; Tkm1d: HWbqa: goto h1Nc5; z7V67: curl_setopt($ch, CURLOPT_CONNECTTIMEOUT, 20); goto qclz1; mavPc: throw new WxPayException("\143\165\162\154\xe5\x87\xba\351\224\231\xef\xbc\x8c\351\x94\231\xe8\257\257\xe7\240\201\x3a{$error}"); goto Lf8xr; GZx46: curl_close($ch); goto mavPc; oiC9U: curl_setopt($ch, CURLOPT_POST, TRUE); goto cclq4; jIFwx: curl_setopt($ch, CURLOPT_TIMEOUT, 40); goto AwUuv; aeti0: curl_setopt($ch, CURLOPT_SSL_VERIFYPEER, FALSE); goto o3RkW; o3RkW: curl_setopt($ch, CURLOPT_SSL_VERIFYHOST, FALSE); goto KYQOM; AwUuv: set_time_limit(0); goto W3GOX; C2rHU: } private function arrayToXml($arr) { goto h1jAr; IxhYP: foreach ($arr as $key => $val) { goto ofBJT; ODzN8: $xml .= "\74" . $key . "\x3e" . arrayToXml($val) . "\74\x2f" . $key . "\x3e"; goto nJjRQ; nhjI1: goto zdc24; goto oo3A4; R7i49: $xml .= "\74" . $key . "\x3e" . $val . "\74\57" . $key . "\x3e"; goto nhjI1; oo3A4: FN4sM: goto ODzN8; nJjRQ: zdc24: goto gj2d1; gj2d1: iyWT_: goto GkAca; ofBJT: if (is_array($val)) { goto FN4sM; } goto R7i49; GkAca: } goto BiwvV; h1jAr: $xml = "\74\162\x6f\157\x74\76"; goto IxhYP; BiwvV: q1uaU: goto RE0Ch; RE0Ch: $xml .= "\74\57\162\157\157\x74\x3e"; goto rPJdh; rPJdh: return $xml; goto vgmdw; vgmdw: } private function xmlToArray($xml) { goto djZuX; DyzsS: $xmlstring = simplexml_load_string($xml, "\x53\x69\x6d\x70\x6c\x65\x58\115\x4c\105\x6c\x65\155\x65\x6e\164", LIBXML_NOCDATA); goto wV1qF; wV1qF: $val = json_decode(json_encode($xmlstring), true); goto mT4wn; mT4wn: return $val; goto cMJfX; djZuX: libxml_disable_entity_loader(true); goto DyzsS; cMJfX: } private function createNoncestr($length = 32) { goto TcsRG; KZhPT: $i = 0; goto JQssN; OLOvW: $str = ''; goto KZhPT; JQssN: D0iX1: goto GmfRv; vr8bl: return $str; goto Frkfh; rm0e6: T9ziG: goto vr8bl; GmfRv: if (!($i < $length)) { goto T9ziG; } goto CjTnw; TcsRG: $chars = "\141\x62\143\144\x65\x66\147\150\151\152\x6b\154\x6d\x6e\157\x70\161\x72\163\164\165\166\167\x78\x79\172\60\x31\x32\63\64\65\x36\x37\70\x39"; goto OLOvW; LtCC6: $i++; goto rwz_o; rwz_o: goto D0iX1; goto rm0e6; CjTnw: $str .= substr($chars, mt_rand(0, strlen($chars) - 1), 1); goto ThseM; ThseM: pg8zd: goto LtCC6; Frkfh: } private function getSign($Obj) { goto lN7YS; nEPTr: $String = md5($String); goto Gulot; A0MuK: $String = $String . "\x26\x6b\x65\x79\x3d" . $this->key; goto nEPTr; SvM7o: ksort($Parameters); goto el9e7; YUe_T: return $result_; goto WOGE4; ZE97k: h1ZCg: goto SvM7o; Gulot: $result_ = strtoupper($String); goto YUe_T; lN7YS: foreach ($Obj as $k => $v) { $Parameters[$k] = $v; itMnI: } goto ZE97k; el9e7: $String = $this->formatBizQueryParaMap($Parameters, false); goto A0MuK; WOGE4: } private function formatBizQueryParaMap($paraMap, $urlencode) { goto YDA3l; xT75T: $reqPar = substr($buff, 0, strlen($buff) - 1); goto ACgvn; E0fDI: return $reqPar; goto pvH9V; YDA3l: $buff = ''; goto LX3FM; ACgvn: hcIud: goto E0fDI; ZSQiJ: $reqPar; goto LFgHi; LX3FM: ksort($paraMap); goto Z_BlS; LFgHi: if (!(strlen($buff) > 0)) { goto hcIud; } goto xT75T; Z_BlS: foreach ($paraMap as $k => $v) { goto PXPpe; zPxUS: G3hSN: goto bCTk3; ZbQLj: $buff .= $k . "\x3d" . $v . "\x26"; goto zPxUS; X3k3I: $v = urlencode($v); goto F3QKP; F3QKP: hbzAn: goto ZbQLj; PXPpe: if (!$urlencode) { goto hbzAn; } goto X3k3I; bCTk3: } goto pxRrT; pxRrT: ol0n3: goto ZSQiJ; pvH9V: } }